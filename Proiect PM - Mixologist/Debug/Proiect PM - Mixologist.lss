
Proiect PM - Mixologist.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000c02  00000c96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000647  00800126  00800126  00000cbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001230  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab1  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c74  00000000  00000000  00002b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  000037ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000769  00000000  00000000  00003a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077b  00000000  00000000  000041b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 76 05 	jmp	0xaec	; 0xaec <__vector_5>
  18:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__vector_6>
  1c:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__vector_7>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_9>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 ba 04 	jmp	0x974	; 0x974 <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e0       	ldi	r30, 0x02	; 2
  90:	fc e0       	ldi	r31, 0x0C	; 12
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 32       	cpi	r26, 0x26	; 38
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	27 e0       	ldi	r18, 0x07	; 7
  a0:	a6 e2       	ldi	r26, 0x26	; 38
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ad 36       	cpi	r26, 0x6D	; 109
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 13 03 	call	0x626	; 0x626 <main>
  b2:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_9>:
volatile uint8_t pinG_pwm;
volatile uint8_t pinB_pwm;
volatile uint8_t pinMotor_pwm;
volatile uint8_t count;

ISR(TIMER2_COMPA_vect) {
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
	count += 1;
  c8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <count>
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <count>
	if (count == 0) {
  d2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <count>
  d6:	81 11       	cpse	r24, r1
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <__vector_9+0x26>
		//PORTB &=
		//PORTD &= ~(1 << PD7);
		PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2));
  da:	88 b1       	in	r24, 0x08	; 8
  dc:	88 7f       	andi	r24, 0xF8	; 248
  de:	88 b9       	out	0x08, r24	; 8
	}
	
	if (count == pinR_pwm) {
  e0:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <count>
  e4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <pinR_pwm>
  e8:	98 13       	cpse	r25, r24
  ea:	01 c0       	rjmp	.+2      	; 0xee <__vector_9+0x34>
		//PORTD |= (1 << PD71);
		PORTC |= (1 << PC0);
  ec:	40 9a       	sbi	0x08, 0	; 8
	}
	
	if (count == pinG_pwm) {
  ee:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <count>
  f2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <pinG_pwm>
  f6:	98 13       	cpse	r25, r24
  f8:	01 c0       	rjmp	.+2      	; 0xfc <__vector_9+0x42>
		PORTC |= (1 << PC1);
  fa:	41 9a       	sbi	0x08, 1	; 8
	}
	
	if (count == pinB_pwm) {
  fc:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <count>
 100:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <pinB_pwm>
 104:	98 13       	cpse	r25, r24
 106:	01 c0       	rjmp	.+2      	; 0x10a <__vector_9+0x50>
		PORTC |= (1 << PC2);
 108:	42 9a       	sbi	0x08, 2	; 8
	}
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <initAnalogWrite>:



void initAnalogWrite() {
	TCCR2B |= (1<<CS20) ;   //clock select is divided by 64.
 118:	e1 eb       	ldi	r30, 0xB1	; 177
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 83       	st	Z, r24
	TCCR2A |= (1<<WGM21);              //sets mode to CTC
 122:	e0 eb       	ldi	r30, 0xB0	; 176
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	80 83       	st	Z, r24
	OCR2A = 0x7C;                      //sets TOP to 124 so the timer will overflow every 0.5 ms.
 12c:	8c e7       	ldi	r24, 0x7C	; 124
 12e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TIMSK2 |= (1<<OCIE2A);              //Output Compare Match A Interrupt Enable
 132:	e0 e7       	ldi	r30, 0x70	; 112
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	80 83       	st	Z, r24
	sei();
 13c:	78 94       	sei
	
	//PORTD |= (1 << PD7);
	DDRC |= (1 << PC0) | (1 << PC1) | (1 << PC2);
 13e:	87 b1       	in	r24, 0x07	; 7
 140:	87 60       	ori	r24, 0x07	; 7
 142:	87 b9       	out	0x07, r24	; 7
 144:	08 95       	ret

00000146 <analogWrite>:
}

void analogWrite(int r, int g, int b) {
	pinR_pwm = 255 - r;
 146:	80 95       	com	r24
 148:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <pinR_pwm>
	pinG_pwm = 255 - g;
 14c:	60 95       	com	r22
 14e:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <pinG_pwm>
	pinB_pwm = 255 -  b;
 152:	40 95       	com	r20
 154:	40 93 37 01 	sts	0x0137, r20	; 0x800137 <pinB_pwm>
 158:	08 95       	ret

0000015a <init_drinks>:
#define FINISHED_MOVE 3000
command drinks[11][16];

int current_receipe;
int number_of_dispenses[11] = {0, 5, 7, 5, 7, 5, 7, 5, 7 };
void init_drinks() {
 15a:	4f 92       	push	r4
 15c:	5f 92       	push	r5
 15e:	6f 92       	push	r6
 160:	7f 92       	push	r7
 162:	8f 92       	push	r8
 164:	9f 92       	push	r9
 166:	af 92       	push	r10
 168:	bf 92       	push	r11
 16a:	cf 92       	push	r12
 16c:	df 92       	push	r13
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
	// JAGGER AND COLA
	drinks[1][0].amount = DRINK_JAGGER;
 176:	a6 e1       	ldi	r26, 0x16	; 22
 178:	b1 e0       	ldi	r27, 0x01	; 1
 17a:	4d 90       	ld	r4, X+
 17c:	5c 90       	ld	r5, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	05 2c       	mov	r0, r5
 182:	00 0c       	add	r0, r0
 184:	66 08       	sbc	r6, r6
 186:	77 08       	sbc	r7, r7
 188:	40 92 ce 01 	sts	0x01CE, r4	; 0x8001ce <drinks+0x91>
 18c:	50 92 cf 01 	sts	0x01CF, r5	; 0x8001cf <drinks+0x92>
 190:	60 92 d0 01 	sts	0x01D0, r6	; 0x8001d0 <drinks+0x93>
 194:	70 92 d1 01 	sts	0x01D1, r7	; 0x8001d1 <drinks+0x94>
	drinks[1][0].type = COMMAND_MOVE;
 198:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <drinks+0x90>
	
	drinks[1][1].amount = 11000;
 19c:	48 ef       	ldi	r20, 0xF8	; 248
 19e:	5a e2       	ldi	r21, 0x2A	; 42
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	40 93 d7 01 	sts	0x01D7, r20	; 0x8001d7 <drinks+0x9a>
 1a8:	50 93 d8 01 	sts	0x01D8, r21	; 0x8001d8 <drinks+0x9b>
 1ac:	60 93 d9 01 	sts	0x01D9, r22	; 0x8001d9 <drinks+0x9c>
 1b0:	70 93 da 01 	sts	0x01DA, r23	; 0x8001da <drinks+0x9d>
	drinks[1][1].type = COMMAND_DISPENSE;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <drinks+0x99>
	
	drinks[1][2].amount = DRINK_COLA;
 1ba:	18 96       	adiw	r26, 0x08	; 8
 1bc:	cd 90       	ld	r12, X+
 1be:	dc 90       	ld	r13, X
 1c0:	19 97       	sbiw	r26, 0x09	; 9
 1c2:	0d 2c       	mov	r0, r13
 1c4:	00 0c       	add	r0, r0
 1c6:	ee 08       	sbc	r14, r14
 1c8:	ff 08       	sbc	r15, r15
 1ca:	c0 92 e0 01 	sts	0x01E0, r12	; 0x8001e0 <drinks+0xa3>
 1ce:	d0 92 e1 01 	sts	0x01E1, r13	; 0x8001e1 <drinks+0xa4>
 1d2:	e0 92 e2 01 	sts	0x01E2, r14	; 0x8001e2 <drinks+0xa5>
 1d6:	f0 92 e3 01 	sts	0x01E3, r15	; 0x8001e3 <drinks+0xa6>
	drinks[1][2].type = COMMAND_MOVE;
 1da:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <drinks+0xa2>
	
	drinks[1][3].amount = 11000;
 1de:	40 93 e9 01 	sts	0x01E9, r20	; 0x8001e9 <drinks+0xac>
 1e2:	50 93 ea 01 	sts	0x01EA, r21	; 0x8001ea <drinks+0xad>
 1e6:	60 93 eb 01 	sts	0x01EB, r22	; 0x8001eb <drinks+0xae>
 1ea:	70 93 ec 01 	sts	0x01EC, r23	; 0x8001ec <drinks+0xaf>
	drinks[1][3].type = COMMAND_DISPENSE;
 1ee:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <drinks+0xab>
	
	drinks[1][4].amount = FINISHED_MOVE;
 1f2:	08 eb       	ldi	r16, 0xB8	; 184
 1f4:	1b e0       	ldi	r17, 0x0B	; 11
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	00 93 f2 01 	sts	0x01F2, r16	; 0x8001f2 <drinks+0xb5>
 1fe:	10 93 f3 01 	sts	0x01F3, r17	; 0x8001f3 <drinks+0xb6>
 202:	20 93 f4 01 	sts	0x01F4, r18	; 0x8001f4 <drinks+0xb7>
 206:	30 93 f5 01 	sts	0x01F5, r19	; 0x8001f5 <drinks+0xb8>
	drinks[1][4].type = COMMAND_MOVE;
 20a:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <drinks+0xb4>
	
	
	// JAGGER AND DOUBLE COLA
	drinks[2][0].amount = DRINK_JAGGER;
 20e:	40 92 5e 02 	sts	0x025E, r4	; 0x80025e <drinks+0x121>
 212:	50 92 5f 02 	sts	0x025F, r5	; 0x80025f <drinks+0x122>
 216:	60 92 60 02 	sts	0x0260, r6	; 0x800260 <drinks+0x123>
 21a:	70 92 61 02 	sts	0x0261, r7	; 0x800261 <drinks+0x124>
	drinks[2][0].type = COMMAND_MOVE;
 21e:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <drinks+0x120>
	
	drinks[2][1].amount = 11000;
 222:	40 93 67 02 	sts	0x0267, r20	; 0x800267 <drinks+0x12a>
 226:	50 93 68 02 	sts	0x0268, r21	; 0x800268 <drinks+0x12b>
 22a:	60 93 69 02 	sts	0x0269, r22	; 0x800269 <drinks+0x12c>
 22e:	70 93 6a 02 	sts	0x026A, r23	; 0x80026a <drinks+0x12d>
	drinks[2][1].type = COMMAND_DISPENSE;
 232:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <drinks+0x129>
	
	drinks[2][2].amount = DRINK_COLA;
 236:	c0 92 70 02 	sts	0x0270, r12	; 0x800270 <drinks+0x133>
 23a:	d0 92 71 02 	sts	0x0271, r13	; 0x800271 <drinks+0x134>
 23e:	e0 92 72 02 	sts	0x0272, r14	; 0x800272 <drinks+0x135>
 242:	f0 92 73 02 	sts	0x0273, r15	; 0x800273 <drinks+0x136>
	drinks[2][2].type = COMMAND_MOVE;
 246:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <drinks+0x132>
	
	drinks[2][3].amount = 11000;
 24a:	40 93 79 02 	sts	0x0279, r20	; 0x800279 <drinks+0x13c>
 24e:	50 93 7a 02 	sts	0x027A, r21	; 0x80027a <drinks+0x13d>
 252:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <drinks+0x13e>
 256:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <drinks+0x13f>
	drinks[2][3].type = COMMAND_DISPENSE;
 25a:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <drinks+0x13b>
	
	drinks[2][4].amount = DRINK_COLA;
 25e:	c0 92 82 02 	sts	0x0282, r12	; 0x800282 <drinks+0x145>
 262:	d0 92 83 02 	sts	0x0283, r13	; 0x800283 <drinks+0x146>
 266:	e0 92 84 02 	sts	0x0284, r14	; 0x800284 <drinks+0x147>
 26a:	f0 92 85 02 	sts	0x0285, r15	; 0x800285 <drinks+0x148>
	drinks[2][4].type = COMMAND_WAIT;
 26e:	92 e0       	ldi	r25, 0x02	; 2
 270:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <drinks+0x144>
	
	drinks[2][5].amount = 11000;
 274:	40 93 8b 02 	sts	0x028B, r20	; 0x80028b <drinks+0x14e>
 278:	50 93 8c 02 	sts	0x028C, r21	; 0x80028c <drinks+0x14f>
 27c:	60 93 8d 02 	sts	0x028D, r22	; 0x80028d <drinks+0x150>
 280:	70 93 8e 02 	sts	0x028E, r23	; 0x80028e <drinks+0x151>
	drinks[2][5].type = COMMAND_DISPENSE;
 284:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <drinks+0x14d>
	
	drinks[2][6].amount = FINISHED_MOVE;
 288:	00 93 94 02 	sts	0x0294, r16	; 0x800294 <drinks+0x157>
 28c:	10 93 95 02 	sts	0x0295, r17	; 0x800295 <drinks+0x158>
 290:	20 93 96 02 	sts	0x0296, r18	; 0x800296 <drinks+0x159>
 294:	30 93 97 02 	sts	0x0297, r19	; 0x800297 <drinks+0x15a>
	drinks[2][6].type = COMMAND_MOVE;
 298:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <drinks+0x156>
	
	
	// RUM + COLA
	drinks[3][0].amount = DRINK_ROM;
 29c:	16 96       	adiw	r26, 0x06	; 6
 29e:	8d 90       	ld	r8, X+
 2a0:	9c 90       	ld	r9, X
 2a2:	17 97       	sbiw	r26, 0x07	; 7
 2a4:	09 2c       	mov	r0, r9
 2a6:	00 0c       	add	r0, r0
 2a8:	aa 08       	sbc	r10, r10
 2aa:	bb 08       	sbc	r11, r11
 2ac:	80 92 ee 02 	sts	0x02EE, r8	; 0x8002ee <drinks+0x1b1>
 2b0:	90 92 ef 02 	sts	0x02EF, r9	; 0x8002ef <drinks+0x1b2>
 2b4:	a0 92 f0 02 	sts	0x02F0, r10	; 0x8002f0 <drinks+0x1b3>
 2b8:	b0 92 f1 02 	sts	0x02F1, r11	; 0x8002f1 <drinks+0x1b4>
	drinks[3][0].type = COMMAND_MOVE;
 2bc:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <drinks+0x1b0>
	
	drinks[3][1].amount = 11000;
 2c0:	40 93 f7 02 	sts	0x02F7, r20	; 0x8002f7 <drinks+0x1ba>
 2c4:	50 93 f8 02 	sts	0x02F8, r21	; 0x8002f8 <drinks+0x1bb>
 2c8:	60 93 f9 02 	sts	0x02F9, r22	; 0x8002f9 <drinks+0x1bc>
 2cc:	70 93 fa 02 	sts	0x02FA, r23	; 0x8002fa <drinks+0x1bd>
	drinks[3][1].type = COMMAND_DISPENSE;
 2d0:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <drinks+0x1b9>
	
	drinks[3][2].amount = DRINK_COLA;
 2d4:	c0 92 00 03 	sts	0x0300, r12	; 0x800300 <drinks+0x1c3>
 2d8:	d0 92 01 03 	sts	0x0301, r13	; 0x800301 <drinks+0x1c4>
 2dc:	e0 92 02 03 	sts	0x0302, r14	; 0x800302 <drinks+0x1c5>
 2e0:	f0 92 03 03 	sts	0x0303, r15	; 0x800303 <drinks+0x1c6>
	drinks[3][2].type = COMMAND_MOVE;
 2e4:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <drinks+0x1c2>
	
	drinks[3][3].amount = 11000;
 2e8:	40 93 09 03 	sts	0x0309, r20	; 0x800309 <drinks+0x1cc>
 2ec:	50 93 0a 03 	sts	0x030A, r21	; 0x80030a <drinks+0x1cd>
 2f0:	60 93 0b 03 	sts	0x030B, r22	; 0x80030b <drinks+0x1ce>
 2f4:	70 93 0c 03 	sts	0x030C, r23	; 0x80030c <drinks+0x1cf>
	drinks[3][3].type = COMMAND_DISPENSE;
 2f8:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <drinks+0x1cb>
	
	drinks[3][4].amount = FINISHED_MOVE;
 2fc:	00 93 12 03 	sts	0x0312, r16	; 0x800312 <drinks+0x1d5>
 300:	10 93 13 03 	sts	0x0313, r17	; 0x800313 <drinks+0x1d6>
 304:	20 93 14 03 	sts	0x0314, r18	; 0x800314 <drinks+0x1d7>
 308:	30 93 15 03 	sts	0x0315, r19	; 0x800315 <drinks+0x1d8>
	drinks[3][4].type = COMMAND_MOVE;
 30c:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <drinks+0x1d4>
	
	// ROM AND DOUBLE COLA
	drinks[4][0].amount = DRINK_JAGGER;
 310:	40 92 7e 03 	sts	0x037E, r4	; 0x80037e <drinks+0x241>
 314:	50 92 7f 03 	sts	0x037F, r5	; 0x80037f <drinks+0x242>
 318:	60 92 80 03 	sts	0x0380, r6	; 0x800380 <drinks+0x243>
 31c:	70 92 81 03 	sts	0x0381, r7	; 0x800381 <drinks+0x244>
	drinks[4][0].type = COMMAND_MOVE;
 320:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <drinks+0x240>
	
	drinks[4][1].amount = 11000;
 324:	40 93 87 03 	sts	0x0387, r20	; 0x800387 <drinks+0x24a>
 328:	50 93 88 03 	sts	0x0388, r21	; 0x800388 <drinks+0x24b>
 32c:	60 93 89 03 	sts	0x0389, r22	; 0x800389 <drinks+0x24c>
 330:	70 93 8a 03 	sts	0x038A, r23	; 0x80038a <drinks+0x24d>
	drinks[4][1].type = COMMAND_DISPENSE;
 334:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <drinks+0x249>
	
	drinks[4][2].amount = DRINK_COLA;
 338:	c0 92 90 03 	sts	0x0390, r12	; 0x800390 <drinks+0x253>
 33c:	d0 92 91 03 	sts	0x0391, r13	; 0x800391 <drinks+0x254>
 340:	e0 92 92 03 	sts	0x0392, r14	; 0x800392 <drinks+0x255>
 344:	f0 92 93 03 	sts	0x0393, r15	; 0x800393 <drinks+0x256>
	drinks[4][2].type = COMMAND_MOVE;
 348:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <drinks+0x252>
	
	drinks[4][3].amount = 11000;
 34c:	40 93 99 03 	sts	0x0399, r20	; 0x800399 <drinks+0x25c>
 350:	50 93 9a 03 	sts	0x039A, r21	; 0x80039a <drinks+0x25d>
 354:	60 93 9b 03 	sts	0x039B, r22	; 0x80039b <drinks+0x25e>
 358:	70 93 9c 03 	sts	0x039C, r23	; 0x80039c <drinks+0x25f>
	drinks[4][3].type = COMMAND_DISPENSE;
 35c:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <drinks+0x25b>
	
	drinks[4][4].amount = DRINK_COLA;
 360:	c0 92 a2 03 	sts	0x03A2, r12	; 0x8003a2 <drinks+0x265>
 364:	d0 92 a3 03 	sts	0x03A3, r13	; 0x8003a3 <drinks+0x266>
 368:	e0 92 a4 03 	sts	0x03A4, r14	; 0x8003a4 <drinks+0x267>
 36c:	f0 92 a5 03 	sts	0x03A5, r15	; 0x8003a5 <drinks+0x268>
	drinks[2][4].type = COMMAND_WAIT;
	
	drinks[4][5].amount = 11000;
 370:	40 93 ab 03 	sts	0x03AB, r20	; 0x8003ab <drinks+0x26e>
 374:	50 93 ac 03 	sts	0x03AC, r21	; 0x8003ac <drinks+0x26f>
 378:	60 93 ad 03 	sts	0x03AD, r22	; 0x8003ad <drinks+0x270>
 37c:	70 93 ae 03 	sts	0x03AE, r23	; 0x8003ae <drinks+0x271>
	drinks[4][5].type = COMMAND_DISPENSE;
 380:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <drinks+0x26d>
	
	drinks[4][6].amount = FINISHED_MOVE;
 384:	00 93 b4 03 	sts	0x03B4, r16	; 0x8003b4 <drinks+0x277>
 388:	10 93 b5 03 	sts	0x03B5, r17	; 0x8003b5 <drinks+0x278>
 38c:	20 93 b6 03 	sts	0x03B6, r18	; 0x8003b6 <drinks+0x279>
 390:	30 93 b7 03 	sts	0x03B7, r19	; 0x8003b7 <drinks+0x27a>
	drinks[4][6].type = COMMAND_MOVE;
 394:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <drinks+0x276>
	
	// MONA + TONIC
	drinks[5][0].amount = DRINK_MONA;
 398:	14 96       	adiw	r26, 0x04	; 4
 39a:	ed 91       	ld	r30, X+
 39c:	fc 91       	ld	r31, X
 39e:	15 97       	sbiw	r26, 0x05	; 5
 3a0:	2f 01       	movw	r4, r30
 3a2:	ff 0f       	add	r31, r31
 3a4:	66 08       	sbc	r6, r6
 3a6:	77 08       	sbc	r7, r7
 3a8:	40 92 0e 04 	sts	0x040E, r4	; 0x80040e <drinks+0x2d1>
 3ac:	50 92 0f 04 	sts	0x040F, r5	; 0x80040f <drinks+0x2d2>
 3b0:	60 92 10 04 	sts	0x0410, r6	; 0x800410 <drinks+0x2d3>
 3b4:	70 92 11 04 	sts	0x0411, r7	; 0x800411 <drinks+0x2d4>
	drinks[5][0].type = COMMAND_MOVE;
 3b8:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <drinks+0x2d0>
	
	drinks[5][1].amount = 11000;
 3bc:	40 93 17 04 	sts	0x0417, r20	; 0x800417 <drinks+0x2da>
 3c0:	50 93 18 04 	sts	0x0418, r21	; 0x800418 <drinks+0x2db>
 3c4:	60 93 19 04 	sts	0x0419, r22	; 0x800419 <drinks+0x2dc>
 3c8:	70 93 1a 04 	sts	0x041A, r23	; 0x80041a <drinks+0x2dd>
	drinks[5][1].type = COMMAND_DISPENSE;
 3cc:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <drinks+0x2d9>
	
	drinks[5][2].amount = DRINK_SCHWEEPS;
 3d0:	1a 96       	adiw	r26, 0x0a	; 10
 3d2:	cd 90       	ld	r12, X+
 3d4:	dc 90       	ld	r13, X
 3d6:	1b 97       	sbiw	r26, 0x0b	; 11
 3d8:	0d 2c       	mov	r0, r13
 3da:	00 0c       	add	r0, r0
 3dc:	ee 08       	sbc	r14, r14
 3de:	ff 08       	sbc	r15, r15
 3e0:	c0 92 20 04 	sts	0x0420, r12	; 0x800420 <drinks+0x2e3>
 3e4:	d0 92 21 04 	sts	0x0421, r13	; 0x800421 <drinks+0x2e4>
 3e8:	e0 92 22 04 	sts	0x0422, r14	; 0x800422 <drinks+0x2e5>
 3ec:	f0 92 23 04 	sts	0x0423, r15	; 0x800423 <drinks+0x2e6>
	drinks[5][2].type = COMMAND_MOVE;
 3f0:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <drinks+0x2e2>
	
	drinks[5][3].amount = 11000;
 3f4:	40 93 29 04 	sts	0x0429, r20	; 0x800429 <drinks+0x2ec>
 3f8:	50 93 2a 04 	sts	0x042A, r21	; 0x80042a <drinks+0x2ed>
 3fc:	60 93 2b 04 	sts	0x042B, r22	; 0x80042b <drinks+0x2ee>
 400:	70 93 2c 04 	sts	0x042C, r23	; 0x80042c <drinks+0x2ef>
	drinks[5][3].type = COMMAND_DISPENSE;
 404:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <drinks+0x2eb>
	
	drinks[5][4].amount = FINISHED_MOVE;
 408:	00 93 32 04 	sts	0x0432, r16	; 0x800432 <drinks+0x2f5>
 40c:	10 93 33 04 	sts	0x0433, r17	; 0x800433 <drinks+0x2f6>
 410:	20 93 34 04 	sts	0x0434, r18	; 0x800434 <drinks+0x2f7>
 414:	30 93 35 04 	sts	0x0435, r19	; 0x800435 <drinks+0x2f8>
	drinks[5][4].type = COMMAND_MOVE;
 418:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <drinks+0x2f4>
	
	
	// MONA AND DOUBLE TONIC
	drinks[6][0].amount = DRINK_MONA;
 41c:	40 92 9e 04 	sts	0x049E, r4	; 0x80049e <drinks+0x361>
 420:	50 92 9f 04 	sts	0x049F, r5	; 0x80049f <drinks+0x362>
 424:	60 92 a0 04 	sts	0x04A0, r6	; 0x8004a0 <drinks+0x363>
 428:	70 92 a1 04 	sts	0x04A1, r7	; 0x8004a1 <drinks+0x364>
	drinks[6][0].type = COMMAND_MOVE;
 42c:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <drinks+0x360>
	
	drinks[6][1].amount = 11000;
 430:	40 93 a7 04 	sts	0x04A7, r20	; 0x8004a7 <drinks+0x36a>
 434:	50 93 a8 04 	sts	0x04A8, r21	; 0x8004a8 <drinks+0x36b>
 438:	60 93 a9 04 	sts	0x04A9, r22	; 0x8004a9 <drinks+0x36c>
 43c:	70 93 aa 04 	sts	0x04AA, r23	; 0x8004aa <drinks+0x36d>
	drinks[6][1].type = COMMAND_DISPENSE;
 440:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <drinks+0x369>
	
	drinks[6][2].amount = DRINK_SCHWEEPS;
 444:	c0 92 b0 04 	sts	0x04B0, r12	; 0x8004b0 <drinks+0x373>
 448:	d0 92 b1 04 	sts	0x04B1, r13	; 0x8004b1 <drinks+0x374>
 44c:	e0 92 b2 04 	sts	0x04B2, r14	; 0x8004b2 <drinks+0x375>
 450:	f0 92 b3 04 	sts	0x04B3, r15	; 0x8004b3 <drinks+0x376>
	drinks[6][2].type = COMMAND_MOVE;
 454:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <drinks+0x372>
	
	drinks[6][3].amount = 11000;
 458:	40 93 b9 04 	sts	0x04B9, r20	; 0x8004b9 <drinks+0x37c>
 45c:	50 93 ba 04 	sts	0x04BA, r21	; 0x8004ba <drinks+0x37d>
 460:	60 93 bb 04 	sts	0x04BB, r22	; 0x8004bb <drinks+0x37e>
 464:	70 93 bc 04 	sts	0x04BC, r23	; 0x8004bc <drinks+0x37f>
	drinks[6][3].type = COMMAND_DISPENSE;
 468:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <drinks+0x37b>
	
	drinks[6][4].amount = DRINK_SCHWEEPS;
 46c:	c0 92 c2 04 	sts	0x04C2, r12	; 0x8004c2 <drinks+0x385>
 470:	d0 92 c3 04 	sts	0x04C3, r13	; 0x8004c3 <drinks+0x386>
 474:	e0 92 c4 04 	sts	0x04C4, r14	; 0x8004c4 <drinks+0x387>
 478:	f0 92 c5 04 	sts	0x04C5, r15	; 0x8004c5 <drinks+0x388>
	drinks[2][4].type = COMMAND_WAIT;
	
	drinks[6][5].amount = 11000;
 47c:	40 93 cb 04 	sts	0x04CB, r20	; 0x8004cb <drinks+0x38e>
 480:	50 93 cc 04 	sts	0x04CC, r21	; 0x8004cc <drinks+0x38f>
 484:	60 93 cd 04 	sts	0x04CD, r22	; 0x8004cd <drinks+0x390>
 488:	70 93 ce 04 	sts	0x04CE, r23	; 0x8004ce <drinks+0x391>
	drinks[6][5].type = COMMAND_DISPENSE;
 48c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <drinks+0x38d>
	
	drinks[6][6].amount = FINISHED_MOVE;
 490:	00 93 d4 04 	sts	0x04D4, r16	; 0x8004d4 <drinks+0x397>
 494:	10 93 d5 04 	sts	0x04D5, r17	; 0x8004d5 <drinks+0x398>
 498:	20 93 d6 04 	sts	0x04D6, r18	; 0x8004d6 <drinks+0x399>
 49c:	30 93 d7 04 	sts	0x04D7, r19	; 0x8004d7 <drinks+0x39a>
	drinks[6][6].type = COMMAND_MOVE;
 4a0:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <drinks+0x396>
	
	
	// MONA + TONIC
	drinks[7][0].amount = DRINK_MONA;
 4a4:	40 92 2e 05 	sts	0x052E, r4	; 0x80052e <drinks+0x3f1>
 4a8:	50 92 2f 05 	sts	0x052F, r5	; 0x80052f <drinks+0x3f2>
 4ac:	60 92 30 05 	sts	0x0530, r6	; 0x800530 <drinks+0x3f3>
 4b0:	70 92 31 05 	sts	0x0531, r7	; 0x800531 <drinks+0x3f4>
	drinks[7][0].type = COMMAND_MOVE;
 4b4:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <drinks+0x3f0>
	
	drinks[7][1].amount = 11000;
 4b8:	40 93 37 05 	sts	0x0537, r20	; 0x800537 <drinks+0x3fa>
 4bc:	50 93 38 05 	sts	0x0538, r21	; 0x800538 <drinks+0x3fb>
 4c0:	60 93 39 05 	sts	0x0539, r22	; 0x800539 <drinks+0x3fc>
 4c4:	70 93 3a 05 	sts	0x053A, r23	; 0x80053a <drinks+0x3fd>
	drinks[7][1].type = COMMAND_DISPENSE;
 4c8:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <drinks+0x3f9>
	
	drinks[7][2].amount = DRINK_SCHWEEPS;
 4cc:	c0 92 40 05 	sts	0x0540, r12	; 0x800540 <drinks+0x403>
 4d0:	d0 92 41 05 	sts	0x0541, r13	; 0x800541 <drinks+0x404>
 4d4:	e0 92 42 05 	sts	0x0542, r14	; 0x800542 <drinks+0x405>
 4d8:	f0 92 43 05 	sts	0x0543, r15	; 0x800543 <drinks+0x406>
	drinks[7][2].type = COMMAND_MOVE;
 4dc:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <drinks+0x402>
	
	drinks[7][3].amount = 11000;
 4e0:	40 93 49 05 	sts	0x0549, r20	; 0x800549 <drinks+0x40c>
 4e4:	50 93 4a 05 	sts	0x054A, r21	; 0x80054a <drinks+0x40d>
 4e8:	60 93 4b 05 	sts	0x054B, r22	; 0x80054b <drinks+0x40e>
 4ec:	70 93 4c 05 	sts	0x054C, r23	; 0x80054c <drinks+0x40f>
	drinks[7][3].type = COMMAND_DISPENSE;
 4f0:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <drinks+0x40b>
	
	drinks[7][4].amount = FINISHED_MOVE;
 4f4:	00 93 52 05 	sts	0x0552, r16	; 0x800552 <drinks+0x415>
 4f8:	10 93 53 05 	sts	0x0553, r17	; 0x800553 <drinks+0x416>
 4fc:	20 93 54 05 	sts	0x0554, r18	; 0x800554 <drinks+0x417>
 500:	30 93 55 05 	sts	0x0555, r19	; 0x800555 <drinks+0x418>
	drinks[7][4].type = COMMAND_MOVE;
 504:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <drinks+0x414>
	
	
	// MONA AND DOUBLE TONIC
	drinks[8][0].amount = DRINK_MONA;
 508:	40 92 be 05 	sts	0x05BE, r4	; 0x8005be <drinks+0x481>
 50c:	50 92 bf 05 	sts	0x05BF, r5	; 0x8005bf <drinks+0x482>
 510:	60 92 c0 05 	sts	0x05C0, r6	; 0x8005c0 <drinks+0x483>
 514:	70 92 c1 05 	sts	0x05C1, r7	; 0x8005c1 <drinks+0x484>
	drinks[8][0].type = COMMAND_MOVE;
 518:	10 92 bd 05 	sts	0x05BD, r1	; 0x8005bd <drinks+0x480>
	
	drinks[8][1].amount = 11000;
 51c:	40 93 c7 05 	sts	0x05C7, r20	; 0x8005c7 <drinks+0x48a>
 520:	50 93 c8 05 	sts	0x05C8, r21	; 0x8005c8 <drinks+0x48b>
 524:	60 93 c9 05 	sts	0x05C9, r22	; 0x8005c9 <drinks+0x48c>
 528:	70 93 ca 05 	sts	0x05CA, r23	; 0x8005ca <drinks+0x48d>
	drinks[8][1].type = COMMAND_DISPENSE;
 52c:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <drinks+0x489>
	
	drinks[8][2].amount = DRINK_SCHWEEPS;
 530:	c0 92 d0 05 	sts	0x05D0, r12	; 0x8005d0 <drinks+0x493>
 534:	d0 92 d1 05 	sts	0x05D1, r13	; 0x8005d1 <drinks+0x494>
 538:	e0 92 d2 05 	sts	0x05D2, r14	; 0x8005d2 <drinks+0x495>
 53c:	f0 92 d3 05 	sts	0x05D3, r15	; 0x8005d3 <drinks+0x496>
	drinks[8][2].type = COMMAND_MOVE;
 540:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <drinks+0x492>
	
	drinks[8][3].amount = 11000;
 544:	40 93 d9 05 	sts	0x05D9, r20	; 0x8005d9 <drinks+0x49c>
 548:	50 93 da 05 	sts	0x05DA, r21	; 0x8005da <drinks+0x49d>
 54c:	60 93 db 05 	sts	0x05DB, r22	; 0x8005db <drinks+0x49e>
 550:	70 93 dc 05 	sts	0x05DC, r23	; 0x8005dc <drinks+0x49f>
	drinks[8][3].type = COMMAND_DISPENSE;
 554:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <drinks+0x49b>
	
	drinks[8][4].amount = DRINK_SCHWEEPS;
 558:	c0 92 e2 05 	sts	0x05E2, r12	; 0x8005e2 <drinks+0x4a5>
 55c:	d0 92 e3 05 	sts	0x05E3, r13	; 0x8005e3 <drinks+0x4a6>
 560:	e0 92 e4 05 	sts	0x05E4, r14	; 0x8005e4 <drinks+0x4a7>
 564:	f0 92 e5 05 	sts	0x05E5, r15	; 0x8005e5 <drinks+0x4a8>
	drinks[2][4].type = COMMAND_WAIT;
	
	drinks[8][5].amount = 11000;
 568:	40 93 eb 05 	sts	0x05EB, r20	; 0x8005eb <drinks+0x4ae>
 56c:	50 93 ec 05 	sts	0x05EC, r21	; 0x8005ec <drinks+0x4af>
 570:	60 93 ed 05 	sts	0x05ED, r22	; 0x8005ed <drinks+0x4b0>
 574:	70 93 ee 05 	sts	0x05EE, r23	; 0x8005ee <drinks+0x4b1>
	drinks[8][5].type = COMMAND_DISPENSE;
 578:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <drinks+0x4ad>
	
	drinks[8][6].amount = FINISHED_MOVE;
 57c:	00 93 f4 05 	sts	0x05F4, r16	; 0x8005f4 <drinks+0x4b7>
 580:	10 93 f5 05 	sts	0x05F5, r17	; 0x8005f5 <drinks+0x4b8>
 584:	20 93 f6 05 	sts	0x05F6, r18	; 0x8005f6 <drinks+0x4b9>
 588:	30 93 f7 05 	sts	0x05F7, r19	; 0x8005f7 <drinks+0x4ba>
	drinks[8][6].type = COMMAND_MOVE;
 58c:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <drinks+0x4b6>
	
	// ROM + MONA + TONIC
	drinks[9][0].amount = DRINK_ROM;
 590:	80 92 4e 06 	sts	0x064E, r8	; 0x80064e <drinks+0x511>
 594:	90 92 4f 06 	sts	0x064F, r9	; 0x80064f <drinks+0x512>
 598:	a0 92 50 06 	sts	0x0650, r10	; 0x800650 <drinks+0x513>
 59c:	b0 92 51 06 	sts	0x0651, r11	; 0x800651 <drinks+0x514>
	drinks[9][0].type = COMMAND_MOVE;
 5a0:	10 92 4d 06 	sts	0x064D, r1	; 0x80064d <drinks+0x510>
	
	drinks[9][1].amount = 11000;
 5a4:	40 93 57 06 	sts	0x0657, r20	; 0x800657 <drinks+0x51a>
 5a8:	50 93 58 06 	sts	0x0658, r21	; 0x800658 <drinks+0x51b>
 5ac:	60 93 59 06 	sts	0x0659, r22	; 0x800659 <drinks+0x51c>
 5b0:	70 93 5a 06 	sts	0x065A, r23	; 0x80065a <drinks+0x51d>
	drinks[9][1].type = COMMAND_DISPENSE;
 5b4:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <drinks+0x519>
	
	drinks[9][2].amount = DRINK_MONA;
 5b8:	40 92 60 06 	sts	0x0660, r4	; 0x800660 <drinks+0x523>
 5bc:	50 92 61 06 	sts	0x0661, r5	; 0x800661 <drinks+0x524>
 5c0:	60 92 62 06 	sts	0x0662, r6	; 0x800662 <drinks+0x525>
 5c4:	70 92 63 06 	sts	0x0663, r7	; 0x800663 <drinks+0x526>
	drinks[9][2].type = COMMAND_MOVE;
 5c8:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <drinks+0x522>
	
	drinks[9][3].amount = 11000;
 5cc:	40 93 69 06 	sts	0x0669, r20	; 0x800669 <drinks+0x52c>
 5d0:	50 93 6a 06 	sts	0x066A, r21	; 0x80066a <drinks+0x52d>
 5d4:	60 93 6b 06 	sts	0x066B, r22	; 0x80066b <drinks+0x52e>
 5d8:	70 93 6c 06 	sts	0x066C, r23	; 0x80066c <drinks+0x52f>
	drinks[9][3].type = COMMAND_DISPENSE;
 5dc:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <drinks+0x52b>
	
	drinks[9][4].amount = DRINK_SCHWEEPS;
 5e0:	c0 92 72 06 	sts	0x0672, r12	; 0x800672 <drinks+0x535>
 5e4:	d0 92 73 06 	sts	0x0673, r13	; 0x800673 <drinks+0x536>
 5e8:	e0 92 74 06 	sts	0x0674, r14	; 0x800674 <drinks+0x537>
 5ec:	f0 92 75 06 	sts	0x0675, r15	; 0x800675 <drinks+0x538>
	drinks[9][4].type = COMMAND_MOVE;
 5f0:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <drinks+0x534>
	
	drinks[9][5].amount = FINISHED_MOVE;
 5f4:	00 93 7b 06 	sts	0x067B, r16	; 0x80067b <drinks+0x53e>
 5f8:	10 93 7c 06 	sts	0x067C, r17	; 0x80067c <drinks+0x53f>
 5fc:	20 93 7d 06 	sts	0x067D, r18	; 0x80067d <drinks+0x540>
 600:	30 93 7e 06 	sts	0x067E, r19	; 0x80067e <drinks+0x541>
	drinks[9][5].type = COMMAND_MOVE;
 604:	10 92 7a 06 	sts	0x067A, r1	; 0x80067a <drinks+0x53d>
	
}
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	ff 90       	pop	r15
 60e:	ef 90       	pop	r14
 610:	df 90       	pop	r13
 612:	cf 90       	pop	r12
 614:	bf 90       	pop	r11
 616:	af 90       	pop	r10
 618:	9f 90       	pop	r9
 61a:	8f 90       	pop	r8
 61c:	7f 90       	pop	r7
 61e:	6f 90       	pop	r6
 620:	5f 90       	pop	r5
 622:	4f 90       	pop	r4
 624:	08 95       	ret

00000626 <main>:

int main(void)
{
	int STATE = STATE_WAITING;
	int known_home_glass = 0;
	setup_steppers();
 626:	0e 94 96 05 	call	0xb2c	; 0xb2c <setup_steppers>
	
	setup_stepper_glass(3);
 62a:	83 e0       	ldi	r24, 0x03	; 3
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 b8 05 	call	0xb70	; 0xb70 <setup_stepper_glass>
	set_position_glass(15000);
 632:	88 e9       	ldi	r24, 0x98	; 152
 634:	9a e3       	ldi	r25, 0x3A	; 58
 636:	0e 94 ca 05 	call	0xb94	; 0xb94 <set_position_glass>
	stepper_move_glass(15000);
 63a:	88 e9       	ldi	r24, 0x98	; 152
 63c:	9a e3       	ldi	r25, 0x3A	; 58
 63e:	0e 94 dd 05 	call	0xbba	; 0xbba <stepper_move_glass>
	
	setup_stepper_disp(2);
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 c1 05 	call	0xb82	; 0xb82 <setup_stepper_disp>
	set_position_disp(0);
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <set_position_disp>
	stepper_move_disp(0);
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <stepper_move_disp>
	
	initAnalogWrite();
 65a:	0e 94 8c 00 	call	0x118	; 0x118 <initAnalogWrite>
	init_orderer();
 65e:	0e 94 98 04 	call	0x930	; 0x930 <init_orderer>
	init_drinks();
 662:	0e 94 ad 00 	call	0x15a	; 0x15a <init_drinks>
	//
	uint8_t current_command = 0;
	uint8_t max_command = 0;
	
	//analogWrite(p.r, p.g, p.b);
		DDRD |= (1 << PD7);
 666:	57 9a       	sbi	0x0a, 7	; 10
		//DDRB = 0xFF;
	sei();
 668:	78 94       	sei
	init_drinks();

	rgb_color p;
	p.r = 0;
	p.g = 0;
	p.b = 255;
 66a:	ff 24       	eor	r15, r15
 66c:	fa 94       	dec	r15
	init_orderer();
	init_drinks();

	rgb_color p;
	p.r = 0;
	p.g = 0;
 66e:	00 e0       	ldi	r16, 0x00	; 0
	initAnalogWrite();
	init_orderer();
	init_drinks();

	rgb_color p;
	p.r = 0;
 670:	10 e0       	ldi	r17, 0x00	; 0
	p.g = 0;
	p.b = 255;
	//
	uint8_t current_command = 0;
	uint8_t max_command = 0;
 672:	91 2c       	mov	r9, r1
	rgb_color p;
	p.r = 0;
	p.g = 0;
	p.b = 255;
	//
	uint8_t current_command = 0;
 674:	e1 2c       	mov	r14, r1
}

int main(void)
{
	int STATE = STATE_WAITING;
	int known_home_glass = 0;
 676:	a1 2c       	mov	r10, r1
 678:	b1 2c       	mov	r11, r1
	
}

int main(void)
{
	int STATE = STATE_WAITING;
 67a:	c0 e0       	ldi	r28, 0x00	; 0
 67c:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
		} else if (STATE == STATE_HOMING) {
			PORTD |= (1 << PD7);
			if (!is_moving_glass()) {
				known_home_glass = 1;
 67e:	66 24       	eor	r6, r6
 680:	63 94       	inc	r6
 682:	71 2c       	mov	r7, r1
						max_command = number_of_dispenses[data];
						PORTD |= (1 << PD7);
					}
				} else {
					if (current_command != max_command) {
						if (drinks[current_receipe][current_command].type == COMMAND_MOVE) {
 684:	0f 2e       	mov	r0, r31
 686:	f0 e9       	ldi	r31, 0x90	; 144
 688:	8f 2e       	mov	r8, r31
 68a:	f0 2d       	mov	r31, r0
							p.g = 0;
							p.b = 0;
							analogWrite(p.r, p.g, p.b);					
							stepper_move_disp(drinks[current_receipe][current_command].amount);
						} else if (drinks[current_receipe][current_command].type == COMMAND_WAIT) {
							STATE = STATE_PAUSE;
 68c:	68 94       	set
 68e:	22 24       	eor	r2, r2
 690:	22 f8       	bld	r2, 2
 692:	31 2c       	mov	r3, r1
						PORTD |= (1 << PD7);
					}
				} else {
					if (current_command != max_command) {
						if (drinks[current_receipe][current_command].type == COMMAND_MOVE) {
							STATE = STATE_MOVING_GLASS;
 694:	68 94       	set
 696:	44 24       	eor	r4, r4
 698:	41 f8       	bld	r4, 1
 69a:	51 2c       	mov	r5, r1
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <main+0x7c>
			if (!is_moving_disp()) {
				if (get_position_disp() > 0) {
					_delay_ms(2500);
					stepper_move_disp(0);
				} else {
					STATE = STATE_WAITING;	
 69e:	c0 e0       	ldi	r28, 0x00	; 0
 6a0:	d0 e0       	ldi	r29, 0x00	; 0
		DDRD |= (1 << PD7);
		//DDRB = 0xFF;
	sei();
    while (1) 
    {
			PORTD &= ~0b10000000;
 6a2:	5f 98       	cbi	0x0b, 7	; 11
					if (STATE != STATE_POURING) {
 6a4:	c3 30       	cpi	r28, 0x03	; 3
 6a6:	d1 05       	cpc	r29, r1
 6a8:	09 f4       	brne	.+2      	; 0x6ac <main+0x86>
 6aa:	ff c0       	rjmp	.+510    	; 0x8aa <main+0x284>
						if (p.r > 0 && p.b == 0) {
 6ac:	11 23       	and	r17, r17
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <main+0x8c>
 6b0:	f6 c0       	rjmp	.+492    	; 0x89e <main+0x278>
 6b2:	f1 10       	cpse	r15, r1
 6b4:	04 c0       	rjmp	.+8      	; 0x6be <main+0x98>
							p.r--;
 6b6:	11 50       	subi	r17, 0x01	; 1
							p.g++;
 6b8:	0f 5f       	subi	r16, 0xFF	; 255
						}
						if (p.g > 0 && p.r == 0) {
 6ba:	21 f4       	brne	.+8      	; 0x6c4 <main+0x9e>
 6bc:	0f c0       	rjmp	.+30     	; 0x6dc <main+0xb6>
 6be:	00 23       	and	r16, r16
 6c0:	09 f4       	brne	.+2      	; 0x6c4 <main+0x9e>
 6c2:	f0 c0       	rjmp	.+480    	; 0x8a4 <main+0x27e>
 6c4:	11 11       	cpse	r17, r1
 6c6:	03 c0       	rjmp	.+6      	; 0x6ce <main+0xa8>
							p.g--;
 6c8:	01 50       	subi	r16, 0x01	; 1
							p.b++;
 6ca:	f3 94       	inc	r15
 6cc:	10 e0       	ldi	r17, 0x00	; 0
						}
						if (p.b > 0 && p.g == 0) {
 6ce:	ff 20       	and	r15, r15
 6d0:	29 f0       	breq	.+10     	; 0x6dc <main+0xb6>
 6d2:	01 11       	cpse	r16, r1
 6d4:	03 c0       	rjmp	.+6      	; 0x6dc <main+0xb6>
							p.r++;
 6d6:	1f 5f       	subi	r17, 0xFF	; 255
							p.b--;
 6d8:	fa 94       	dec	r15
 6da:	00 e0       	ldi	r16, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6dc:	8f e1       	ldi	r24, 0x1F	; 31
 6de:	93 e0       	ldi	r25, 0x03	; 3
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <main+0xba>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <main+0xc0>
 6e6:	00 00       	nop
					
					//rgbColour[0] = 255;
					//rgbColour[1] = 255;
					//rgbColour[2] = 255;
					
					analogWrite(p.r, p.g, p.b);
 6e8:	4f 2d       	mov	r20, r15
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	60 2f       	mov	r22, r16
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	81 2f       	mov	r24, r17
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 a3 00 	call	0x146	; 0x146 <analogWrite>
		if (STATE == STATE_WAITING) {
 6f8:	20 97       	sbiw	r28, 0x00	; 0
 6fa:	09 f0       	breq	.+2      	; 0x6fe <main+0xd8>
 6fc:	95 c0       	rjmp	.+298    	; 0x828 <main+0x202>
			if (!known_home_glass) {
 6fe:	a1 14       	cp	r10, r1
 700:	b1 04       	cpc	r11, r1
 702:	59 f4       	brne	.+22     	; 0x71a <main+0xf4>
				STATE = STATE_HOMING;
				stepper_move_glass(0);
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 dd 05 	call	0xbba	; 0xbba <stepper_move_glass>
				stepper_move_disp(0);
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <stepper_move_disp>
					//rgbColour[2] = 255;
					
					analogWrite(p.r, p.g, p.b);
		if (STATE == STATE_WAITING) {
			if (!known_home_glass) {
				STATE = STATE_HOMING;
 714:	c6 2d       	mov	r28, r6
 716:	d7 2d       	mov	r29, r7
 718:	c4 cf       	rjmp	.-120    	; 0x6a2 <main+0x7c>
				stepper_move_glass(0);
				stepper_move_disp(0);
			} else {
				if (current_receipe == 0) {
 71a:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <current_receipe>
 71e:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <current_receipe+0x1>
 722:	21 15       	cp	r18, r1
 724:	31 05       	cpc	r19, r1
 726:	99 f4       	brne	.+38     	; 0x74e <main+0x128>
					uint8_t data = get_orderer_data();
 728:	0e 94 a9 04 	call	0x952	; 0x952 <get_orderer_data>
					if (data) {
 72c:	88 23       	and	r24, r24
 72e:	09 f4       	brne	.+2      	; 0x732 <main+0x10c>
 730:	b8 cf       	rjmp	.-144    	; 0x6a2 <main+0x7c>
						current_command = 0;
						current_receipe = data;
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <current_receipe+0x1>
 738:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <current_receipe>
						max_command = number_of_dispenses[data];
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	fc 01       	movw	r30, r24
 742:	e0 50       	subi	r30, 0x00	; 0
 744:	ff 4f       	sbci	r31, 0xFF	; 255
 746:	90 80       	ld	r9, Z
						PORTD |= (1 << PD7);
 748:	5f 9a       	sbi	0x0b, 7	; 11
				stepper_move_disp(0);
			} else {
				if (current_receipe == 0) {
					uint8_t data = get_orderer_data();
					if (data) {
						current_command = 0;
 74a:	e1 2c       	mov	r14, r1
 74c:	aa cf       	rjmp	.-172    	; 0x6a2 <main+0x7c>
						current_receipe = data;
						max_command = number_of_dispenses[data];
						PORTD |= (1 << PD7);
					}
				} else {
					if (current_command != max_command) {
 74e:	e9 14       	cp	r14, r9
 750:	09 f4       	brne	.+2      	; 0x754 <main+0x12e>
 752:	64 c0       	rjmp	.+200    	; 0x81c <main+0x1f6>
						if (drinks[current_receipe][current_command].type == COMMAND_MOVE) {
 754:	ce 2c       	mov	r12, r14
 756:	d1 2c       	mov	r13, r1
 758:	f6 01       	movw	r30, r12
 75a:	ee 0f       	add	r30, r30
 75c:	ff 1f       	adc	r31, r31
 75e:	ee 0f       	add	r30, r30
 760:	ff 1f       	adc	r31, r31
 762:	ee 0f       	add	r30, r30
 764:	ff 1f       	adc	r31, r31
 766:	ec 0d       	add	r30, r12
 768:	fd 1d       	adc	r31, r13
 76a:	82 9e       	mul	r8, r18
 76c:	c0 01       	movw	r24, r0
 76e:	83 9e       	mul	r8, r19
 770:	90 0d       	add	r25, r0
 772:	11 24       	eor	r1, r1
 774:	e8 0f       	add	r30, r24
 776:	f9 1f       	adc	r31, r25
 778:	e3 5c       	subi	r30, 0xC3	; 195
 77a:	fe 4f       	sbci	r31, 0xFE	; 254
 77c:	80 81       	ld	r24, Z
 77e:	81 11       	cpse	r24, r1
 780:	19 c0       	rjmp	.+50     	; 0x7b4 <main+0x18e>
							STATE = STATE_MOVING_GLASS;
							stepper_move_glass(drinks[current_receipe][current_command].amount);
 782:	f6 01       	movw	r30, r12
 784:	ee 0f       	add	r30, r30
 786:	ff 1f       	adc	r31, r31
 788:	ee 0f       	add	r30, r30
 78a:	ff 1f       	adc	r31, r31
 78c:	ee 0f       	add	r30, r30
 78e:	ff 1f       	adc	r31, r31
 790:	ec 0d       	add	r30, r12
 792:	fd 1d       	adc	r31, r13
 794:	82 9e       	mul	r8, r18
 796:	c0 01       	movw	r24, r0
 798:	83 9e       	mul	r8, r19
 79a:	90 0d       	add	r25, r0
 79c:	11 24       	eor	r1, r1
 79e:	e8 0f       	add	r30, r24
 7a0:	f9 1f       	adc	r31, r25
 7a2:	e3 5c       	subi	r30, 0xC3	; 195
 7a4:	fe 4f       	sbci	r31, 0xFE	; 254
 7a6:	81 81       	ldd	r24, Z+1	; 0x01
 7a8:	92 81       	ldd	r25, Z+2	; 0x02
 7aa:	0e 94 dd 05 	call	0xbba	; 0xbba <stepper_move_glass>
						PORTD |= (1 << PD7);
					}
				} else {
					if (current_command != max_command) {
						if (drinks[current_receipe][current_command].type == COMMAND_MOVE) {
							STATE = STATE_MOVING_GLASS;
 7ae:	c4 2d       	mov	r28, r4
 7b0:	d5 2d       	mov	r29, r5
 7b2:	32 c0       	rjmp	.+100    	; 0x818 <main+0x1f2>
							stepper_move_glass(drinks[current_receipe][current_command].amount);
						} else if (drinks[current_receipe][current_command].type == COMMAND_DISPENSE) {
 7b4:	81 30       	cpi	r24, 0x01	; 1
 7b6:	61 f5       	brne	.+88     	; 0x810 <main+0x1ea>
							STATE = STATE_POURING;
							p.r = 255;
							p.g = 0;
							p.b = 0;
							analogWrite(p.r, p.g, p.b);					
 7b8:	40 e0       	ldi	r20, 0x00	; 0
 7ba:	50 e0       	ldi	r21, 0x00	; 0
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	70 e0       	ldi	r23, 0x00	; 0
 7c0:	8f ef       	ldi	r24, 0xFF	; 255
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 a3 00 	call	0x146	; 0x146 <analogWrite>
							stepper_move_disp(drinks[current_receipe][current_command].amount);
 7c8:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <current_receipe>
 7cc:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <current_receipe+0x1>
 7d0:	96 01       	movw	r18, r12
 7d2:	22 0f       	add	r18, r18
 7d4:	33 1f       	adc	r19, r19
 7d6:	22 0f       	add	r18, r18
 7d8:	33 1f       	adc	r19, r19
 7da:	22 0f       	add	r18, r18
 7dc:	33 1f       	adc	r19, r19
 7de:	c2 0e       	add	r12, r18
 7e0:	d3 1e       	adc	r13, r19
 7e2:	88 9e       	mul	r8, r24
 7e4:	f0 01       	movw	r30, r0
 7e6:	89 9e       	mul	r8, r25
 7e8:	f0 0d       	add	r31, r0
 7ea:	11 24       	eor	r1, r1
 7ec:	c6 01       	movw	r24, r12
 7ee:	8e 0f       	add	r24, r30
 7f0:	9f 1f       	adc	r25, r31
 7f2:	fc 01       	movw	r30, r24
 7f4:	e3 5c       	subi	r30, 0xC3	; 195
 7f6:	fe 4f       	sbci	r31, 0xFE	; 254
 7f8:	81 81       	ldd	r24, Z+1	; 0x01
 7fa:	92 81       	ldd	r25, Z+2	; 0x02
 7fc:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <stepper_move_disp>
							stepper_move_glass(drinks[current_receipe][current_command].amount);
						} else if (drinks[current_receipe][current_command].type == COMMAND_DISPENSE) {
							STATE = STATE_POURING;
							p.r = 255;
							p.g = 0;
							p.b = 0;
 800:	f1 2c       	mov	r15, r1
							STATE = STATE_MOVING_GLASS;
							stepper_move_glass(drinks[current_receipe][current_command].amount);
						} else if (drinks[current_receipe][current_command].type == COMMAND_DISPENSE) {
							STATE = STATE_POURING;
							p.r = 255;
							p.g = 0;
 802:	00 e0       	ldi	r16, 0x00	; 0
						if (drinks[current_receipe][current_command].type == COMMAND_MOVE) {
							STATE = STATE_MOVING_GLASS;
							stepper_move_glass(drinks[current_receipe][current_command].amount);
						} else if (drinks[current_receipe][current_command].type == COMMAND_DISPENSE) {
							STATE = STATE_POURING;
							p.r = 255;
 804:	1f ef       	ldi	r17, 0xFF	; 255
					if (current_command != max_command) {
						if (drinks[current_receipe][current_command].type == COMMAND_MOVE) {
							STATE = STATE_MOVING_GLASS;
							stepper_move_glass(drinks[current_receipe][current_command].amount);
						} else if (drinks[current_receipe][current_command].type == COMMAND_DISPENSE) {
							STATE = STATE_POURING;
 806:	23 e0       	ldi	r18, 0x03	; 3
 808:	c2 2f       	mov	r28, r18
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	d8 2f       	mov	r29, r24
 80e:	04 c0       	rjmp	.+8      	; 0x818 <main+0x1f2>
							p.r = 255;
							p.g = 0;
							p.b = 0;
							analogWrite(p.r, p.g, p.b);					
							stepper_move_disp(drinks[current_receipe][current_command].amount);
						} else if (drinks[current_receipe][current_command].type == COMMAND_WAIT) {
 810:	82 30       	cpi	r24, 0x02	; 2
 812:	11 f4       	brne	.+4      	; 0x818 <main+0x1f2>
							STATE = STATE_PAUSE;
 814:	c2 2d       	mov	r28, r2
 816:	d3 2d       	mov	r29, r3
						}
						current_command ++;
 818:	e3 94       	inc	r14
 81a:	43 cf       	rjmp	.-378    	; 0x6a2 <main+0x7c>
					} else {
						current_receipe = 0;
 81c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <current_receipe+0x1>
 820:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <current_receipe>
 824:	9e 2c       	mov	r9, r14
 826:	3d cf       	rjmp	.-390    	; 0x6a2 <main+0x7c>
					}
				}
			}
		} else if (STATE == STATE_HOMING) {
 828:	c1 30       	cpi	r28, 0x01	; 1
 82a:	d1 05       	cpc	r29, r1
 82c:	51 f4       	brne	.+20     	; 0x842 <main+0x21c>
			PORTD |= (1 << PD7);
 82e:	5f 9a       	sbi	0x0b, 7	; 11
			if (!is_moving_glass()) {
 830:	0e 94 cf 05 	call	0xb9e	; 0xb9e <is_moving_glass>
 834:	81 11       	cpse	r24, r1
 836:	35 cf       	rjmp	.-406    	; 0x6a2 <main+0x7c>
				known_home_glass = 1;
 838:	a6 2c       	mov	r10, r6
 83a:	b7 2c       	mov	r11, r7
				STATE = STATE_WAITING;
 83c:	c0 e0       	ldi	r28, 0x00	; 0
 83e:	d0 e0       	ldi	r29, 0x00	; 0
 840:	30 cf       	rjmp	.-416    	; 0x6a2 <main+0x7c>
			}
		} else if (STATE == STATE_MOVING_GLASS) {
 842:	c2 30       	cpi	r28, 0x02	; 2
 844:	d1 05       	cpc	r29, r1
 846:	d9 f4       	brne	.+54     	; 0x87e <main+0x258>
			if (!is_moving_glass()) {
 848:	0e 94 cf 05 	call	0xb9e	; 0xb9e <is_moving_glass>
 84c:	81 11       	cpse	r24, r1
 84e:	29 cf       	rjmp	.-430    	; 0x6a2 <main+0x7c>
				STATE = STATE_WAITING;
 850:	c0 e0       	ldi	r28, 0x00	; 0
 852:	d0 e0       	ldi	r29, 0x00	; 0
 854:	26 cf       	rjmp	.-436    	; 0x6a2 <main+0x7c>
			}
		} else if (STATE == STATE_POURING) {
			if (!is_moving_disp()) {
				if (get_position_disp() > 0) {
 856:	0e 94 f5 05 	call	0xbea	; 0xbea <get_position_disp>
 85a:	18 16       	cp	r1, r24
 85c:	19 06       	cpc	r1, r25
 85e:	0c f0       	brlt	.+2      	; 0x862 <main+0x23c>
 860:	1e cf       	rjmp	.-452    	; 0x69e <main+0x78>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 862:	8f ef       	ldi	r24, 0xFF	; 255
 864:	91 e1       	ldi	r25, 0x11	; 17
 866:	2a e7       	ldi	r18, 0x7A	; 122
 868:	81 50       	subi	r24, 0x01	; 1
 86a:	90 40       	sbci	r25, 0x00	; 0
 86c:	20 40       	sbci	r18, 0x00	; 0
 86e:	e1 f7       	brne	.-8      	; 0x868 <main+0x242>
 870:	00 c0       	rjmp	.+0      	; 0x872 <main+0x24c>
 872:	00 00       	nop
					_delay_ms(2500);
					stepper_move_disp(0);
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <stepper_move_disp>
 87c:	12 cf       	rjmp	.-476    	; 0x6a2 <main+0x7c>
				} else {
					STATE = STATE_WAITING;	
				}
			}
		} else if( STATE == STATE_PAUSE) {
 87e:	c4 30       	cpi	r28, 0x04	; 4
 880:	d1 05       	cpc	r29, r1
 882:	09 f0       	breq	.+2      	; 0x886 <main+0x260>
 884:	0e cf       	rjmp	.-484    	; 0x6a2 <main+0x7c>
 886:	8f ef       	ldi	r24, 0xFF	; 255
 888:	97 ea       	ldi	r25, 0xA7	; 167
 88a:	21 e6       	ldi	r18, 0x61	; 97
 88c:	81 50       	subi	r24, 0x01	; 1
 88e:	90 40       	sbci	r25, 0x00	; 0
 890:	20 40       	sbci	r18, 0x00	; 0
 892:	e1 f7       	brne	.-8      	; 0x88c <main+0x266>
 894:	00 c0       	rjmp	.+0      	; 0x896 <main+0x270>
 896:	00 00       	nop
			_delay_ms(2000);
			STATE = STATE_WAITING;
 898:	c0 e0       	ldi	r28, 0x00	; 0
 89a:	d0 e0       	ldi	r29, 0x00	; 0
 89c:	02 cf       	rjmp	.-508    	; 0x6a2 <main+0x7c>
					if (STATE != STATE_POURING) {
						if (p.r > 0 && p.b == 0) {
							p.r--;
							p.g++;
						}
						if (p.g > 0 && p.r == 0) {
 89e:	01 11       	cpse	r16, r1
 8a0:	13 cf       	rjmp	.-474    	; 0x6c8 <main+0xa2>
 8a2:	10 c0       	rjmp	.+32     	; 0x8c4 <main+0x29e>
							p.g--;
							p.b++;
						}
						if (p.b > 0 && p.g == 0) {
 8a4:	f1 10       	cpse	r15, r1
 8a6:	17 cf       	rjmp	.-466    	; 0x6d6 <main+0xb0>
 8a8:	19 cf       	rjmp	.-462    	; 0x6dc <main+0xb6>
					
					//rgbColour[0] = 255;
					//rgbColour[1] = 255;
					//rgbColour[2] = 255;
					
					analogWrite(p.r, p.g, p.b);
 8aa:	4f 2d       	mov	r20, r15
 8ac:	50 e0       	ldi	r21, 0x00	; 0
 8ae:	60 2f       	mov	r22, r16
 8b0:	70 e0       	ldi	r23, 0x00	; 0
 8b2:	81 2f       	mov	r24, r17
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	0e 94 a3 00 	call	0x146	; 0x146 <analogWrite>
		} else if (STATE == STATE_MOVING_GLASS) {
			if (!is_moving_glass()) {
				STATE = STATE_WAITING;
			}
		} else if (STATE == STATE_POURING) {
			if (!is_moving_disp()) {
 8ba:	0e 94 e7 05 	call	0xbce	; 0xbce <is_moving_disp>
 8be:	81 11       	cpse	r24, r1
 8c0:	f0 ce       	rjmp	.-544    	; 0x6a2 <main+0x7c>
 8c2:	c9 cf       	rjmp	.-110    	; 0x856 <main+0x230>
						}
						if (p.g > 0 && p.r == 0) {
							p.g--;
							p.b++;
						}
						if (p.b > 0 && p.g == 0) {
 8c4:	f1 10       	cpse	r15, r1
 8c6:	07 cf       	rjmp	.-498    	; 0x6d6 <main+0xb0>
 8c8:	09 cf       	rjmp	.-494    	; 0x6dc <main+0xb6>

000008ca <__vector_7>:
#include "OrderReader.h"

volatile int is_data = 0;
volatile int data = 0;

ISR(PCINT3_vect) {
 8ca:	1f 92       	push	r1
 8cc:	0f 92       	push	r0
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	0f 92       	push	r0
 8d2:	11 24       	eor	r1, r1
 8d4:	2f 93       	push	r18
 8d6:	3f 93       	push	r19
 8d8:	4f 93       	push	r20
 8da:	5f 93       	push	r21
 8dc:	8f 93       	push	r24
 8de:	9f 93       	push	r25
	is_data = 1;
 8e0:	21 e0       	ldi	r18, 0x01	; 1
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <is_data+0x1>
 8e8:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <is_data>
	data = ((ORDER_PIN & (1 << ORDER_BIT_1)) != 0) + ((ORDER_PIN & (1 << ORDER_BIT_2)) != 0) * 2 + ((ORDER_PIN & (1 << ORDER_BIT_3)) != 0) * 4 + ((ORDER_PIN & (1 << ORDER_BIT_4))  != 0) * 8;
 8ec:	59 b1       	in	r21, 0x09	; 9
 8ee:	49 b1       	in	r20, 0x09	; 9
 8f0:	39 b1       	in	r19, 0x09	; 9
 8f2:	29 b1       	in	r18, 0x09	; 9
 8f4:	85 2f       	mov	r24, r21
 8f6:	81 70       	andi	r24, 0x01	; 1
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	42 70       	andi	r20, 0x02	; 2
 8fc:	84 0f       	add	r24, r20
 8fe:	91 1d       	adc	r25, r1
 900:	34 70       	andi	r19, 0x04	; 4
 902:	83 0f       	add	r24, r19
 904:	91 1d       	adc	r25, r1
 906:	28 70       	andi	r18, 0x08	; 8
 908:	82 0f       	add	r24, r18
 90a:	91 1d       	adc	r25, r1
 90c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
 910:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
	PORTD ^= (1 << PD7);
 914:	8b b1       	in	r24, 0x0b	; 11
 916:	80 58       	subi	r24, 0x80	; 128
 918:	8b b9       	out	0x0b, r24	; 11
}
 91a:	9f 91       	pop	r25
 91c:	8f 91       	pop	r24
 91e:	5f 91       	pop	r21
 920:	4f 91       	pop	r20
 922:	3f 91       	pop	r19
 924:	2f 91       	pop	r18
 926:	0f 90       	pop	r0
 928:	0f be       	out	0x3f, r0	; 63
 92a:	0f 90       	pop	r0
 92c:	1f 90       	pop	r1
 92e:	18 95       	reti

00000930 <init_orderer>:

void init_orderer() {
	ORDER_DDR &= ~((1 << ORDER_BIT_CLK) | (1 << ORDER_BIT_1) | (1 << ORDER_BIT_2) | (1 << ORDER_BIT_3) | (1 << ORDER_BIT_4));
 930:	8a b1       	in	r24, 0x0a	; 10
 932:	80 7e       	andi	r24, 0xE0	; 224
 934:	8a b9       	out	0x0a, r24	; 10
	ORDER_PORT |= (1 << ORDER_BIT_CLK) | (1 << ORDER_BIT_1) | (1 << ORDER_BIT_2) | (1 << ORDER_BIT_3) | (1 << ORDER_BIT_4);
 936:	8b b1       	in	r24, 0x0b	; 11
 938:	8f 61       	ori	r24, 0x1F	; 31
 93a:	8b b9       	out	0x0b, r24	; 11
	
	PCICR |= (1 << PCIE3);
 93c:	e8 e6       	ldi	r30, 0x68	; 104
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	88 60       	ori	r24, 0x08	; 8
 944:	80 83       	st	Z, r24
	PCMSK3 |= (1 << PCINT28);
 946:	e3 e7       	ldi	r30, 0x73	; 115
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	80 61       	ori	r24, 0x10	; 16
 94e:	80 83       	st	Z, r24
 950:	08 95       	ret

00000952 <get_orderer_data>:
}

uint8_t get_orderer_data() {
	if (is_data == 0) {
 952:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <is_data>
 956:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <is_data+0x1>
 95a:	89 2b       	or	r24, r25
 95c:	49 f0       	breq	.+18     	; 0x970 <get_orderer_data+0x1e>
		return 0;
	} else {
		is_data = 0;
 95e:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <is_data+0x1>
 962:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <is_data>
		return data;
 966:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 96a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
 96e:	08 95       	ret
	PCMSK3 |= (1 << PCINT28);
}

uint8_t get_orderer_data() {
	if (is_data == 0) {
		return 0;
 970:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		is_data = 0;
		return data;
	}
}
 972:	08 95       	ret

00000974 <__vector_16>:
}



void set_speed_disp(uint8_t ms_for_a_step) {
	ticks_for_step_disp = ms_for_a_step;
 974:	1f 92       	push	r1
 976:	0f 92       	push	r0
 978:	0f b6       	in	r0, 0x3f	; 63
 97a:	0f 92       	push	r0
 97c:	11 24       	eor	r1, r1
 97e:	2f 93       	push	r18
 980:	3f 93       	push	r19
 982:	8f 93       	push	r24
 984:	9f 93       	push	r25
 986:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ticks_glass>
 98a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ticks_glass+0x1>
 98e:	01 96       	adiw	r24, 0x01	; 1
 990:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <ticks_glass+0x1>
 994:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ticks_glass>
 998:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <ticks_glass>
 99c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <ticks_glass+0x1>
 9a0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ticks_for_step_glass>
 9a4:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ticks_for_step_glass+0x1>
 9a8:	28 17       	cp	r18, r24
 9aa:	39 07       	cpc	r19, r25
 9ac:	21 f4       	brne	.+8      	; 0x9b6 <__vector_16+0x42>
 9ae:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <ticks_glass+0x1>
 9b2:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ticks_glass>
 9b6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ticks_glass>
 9ba:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ticks_glass+0x1>
 9be:	89 2b       	or	r24, r25
 9c0:	b9 f5       	brne	.+110    	; 0xa30 <__vector_16+0xbc>
 9c2:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <current_position_glass>
 9c6:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <current_position_glass+0x1>
 9ca:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <target_position_glass>
 9ce:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <target_position_glass+0x1>
 9d2:	28 17       	cp	r18, r24
 9d4:	39 07       	cpc	r19, r25
 9d6:	84 f4       	brge	.+32     	; 0x9f8 <__vector_16+0x84>
 9d8:	46 98       	cbi	0x08, 6	; 8
 9da:	98 b1       	in	r25, 0x08	; 8
 9dc:	80 e2       	ldi	r24, 0x20	; 32
 9de:	89 27       	eor	r24, r25
 9e0:	88 b9       	out	0x08, r24	; 8
 9e2:	44 9a       	sbi	0x08, 4	; 8
 9e4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <current_position_glass>
 9e8:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <current_position_glass+0x1>
 9ec:	01 96       	adiw	r24, 0x01	; 1
 9ee:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <current_position_glass+0x1>
 9f2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <current_position_glass>
 9f6:	1c c0       	rjmp	.+56     	; 0xa30 <__vector_16+0xbc>
 9f8:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <current_position_glass>
 9fc:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <current_position_glass+0x1>
 a00:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <target_position_glass>
 a04:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <target_position_glass+0x1>
 a08:	82 17       	cp	r24, r18
 a0a:	93 07       	cpc	r25, r19
 a0c:	84 f4       	brge	.+32     	; 0xa2e <__vector_16+0xba>
 a0e:	46 98       	cbi	0x08, 6	; 8
 a10:	98 b1       	in	r25, 0x08	; 8
 a12:	80 e2       	ldi	r24, 0x20	; 32
 a14:	89 27       	eor	r24, r25
 a16:	88 b9       	out	0x08, r24	; 8
 a18:	44 98       	cbi	0x08, 4	; 8
 a1a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <current_position_glass>
 a1e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <current_position_glass+0x1>
 a22:	01 97       	sbiw	r24, 0x01	; 1
 a24:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <current_position_glass+0x1>
 a28:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <current_position_glass>
 a2c:	01 c0       	rjmp	.+2      	; 0xa30 <__vector_16+0xbc>
 a2e:	46 9a       	sbi	0x08, 6	; 8
 a30:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ticks_disp>
 a34:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <ticks_disp+0x1>
 a38:	01 96       	adiw	r24, 0x01	; 1
 a3a:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <ticks_disp+0x1>
 a3e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <ticks_disp>
 a42:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <ticks_disp>
 a46:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <ticks_disp+0x1>
 a4a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ticks_for_step_disp>
 a4e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <ticks_for_step_disp+0x1>
 a52:	28 17       	cp	r18, r24
 a54:	39 07       	cpc	r19, r25
 a56:	21 f4       	brne	.+8      	; 0xa60 <__vector_16+0xec>
 a58:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <ticks_disp+0x1>
 a5c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <ticks_disp>
 a60:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ticks_disp>
 a64:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <ticks_disp+0x1>
 a68:	89 2b       	or	r24, r25
 a6a:	b9 f5       	brne	.+110    	; 0xada <__vector_16+0x166>
 a6c:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <current_position_disp>
 a70:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <current_position_disp+0x1>
 a74:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <target_position_disp>
 a78:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <target_position_disp+0x1>
 a7c:	28 17       	cp	r18, r24
 a7e:	39 07       	cpc	r19, r25
 a80:	84 f4       	brge	.+32     	; 0xaa2 <__vector_16+0x12e>
 a82:	2d 98       	cbi	0x05, 5	; 5
 a84:	95 b1       	in	r25, 0x05	; 5
 a86:	80 e4       	ldi	r24, 0x40	; 64
 a88:	89 27       	eor	r24, r25
 a8a:	85 b9       	out	0x05, r24	; 5
 a8c:	2f 9a       	sbi	0x05, 7	; 5
 a8e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current_position_disp>
 a92:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current_position_disp+0x1>
 a96:	01 96       	adiw	r24, 0x01	; 1
 a98:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <current_position_disp+0x1>
 a9c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <current_position_disp>
 aa0:	1c c0       	rjmp	.+56     	; 0xada <__vector_16+0x166>
 aa2:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <current_position_disp>
 aa6:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <current_position_disp+0x1>
 aaa:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <target_position_disp>
 aae:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <target_position_disp+0x1>
 ab2:	82 17       	cp	r24, r18
 ab4:	93 07       	cpc	r25, r19
 ab6:	84 f4       	brge	.+32     	; 0xad8 <__vector_16+0x164>
 ab8:	2d 98       	cbi	0x05, 5	; 5
 aba:	95 b1       	in	r25, 0x05	; 5
 abc:	80 e4       	ldi	r24, 0x40	; 64
 abe:	89 27       	eor	r24, r25
 ac0:	85 b9       	out	0x05, r24	; 5
 ac2:	2f 98       	cbi	0x05, 7	; 5
 ac4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current_position_disp>
 ac8:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current_position_disp+0x1>
 acc:	01 97       	sbiw	r24, 0x01	; 1
 ace:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <current_position_disp+0x1>
 ad2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <current_position_disp>
 ad6:	01 c0       	rjmp	.+2      	; 0xada <__vector_16+0x166>
 ad8:	2d 9a       	sbi	0x05, 5	; 5
 ada:	9f 91       	pop	r25
 adc:	8f 91       	pop	r24
 ade:	3f 91       	pop	r19
 ae0:	2f 91       	pop	r18
 ae2:	0f 90       	pop	r0
 ae4:	0f be       	out	0x3f, r0	; 63
 ae6:	0f 90       	pop	r0
 ae8:	1f 90       	pop	r1
 aea:	18 95       	reti

00000aec <__vector_5>:
 aec:	1f 92       	push	r1
 aee:	0f 92       	push	r0
 af0:	0f b6       	in	r0, 0x3f	; 63
 af2:	0f 92       	push	r0
 af4:	11 24       	eor	r1, r1
 af6:	1b 99       	sbic	0x03, 3	; 3
 af8:	04 c0       	rjmp	.+8      	; 0xb02 <__vector_5+0x16>
 afa:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <current_position_glass+0x1>
 afe:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <current_position_glass>
 b02:	0f 90       	pop	r0
 b04:	0f be       	out	0x3f, r0	; 63
 b06:	0f 90       	pop	r0
 b08:	1f 90       	pop	r1
 b0a:	18 95       	reti

00000b0c <__vector_6>:
 b0c:	1f 92       	push	r1
 b0e:	0f 92       	push	r0
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	0f 92       	push	r0
 b14:	11 24       	eor	r1, r1
 b16:	37 99       	sbic	0x06, 7	; 6
 b18:	04 c0       	rjmp	.+8      	; 0xb22 <__vector_6+0x16>
 b1a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <current_position_disp+0x1>
 b1e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <current_position_disp>
 b22:	0f 90       	pop	r0
 b24:	0f be       	out	0x3f, r0	; 63
 b26:	0f 90       	pop	r0
 b28:	1f 90       	pop	r1
 b2a:	18 95       	reti

00000b2c <setup_steppers>:
 b2c:	84 b5       	in	r24, 0x24	; 36
 b2e:	82 60       	ori	r24, 0x02	; 2
 b30:	84 bd       	out	0x24, r24	; 36
 b32:	85 b5       	in	r24, 0x25	; 37
 b34:	85 60       	ori	r24, 0x05	; 5
 b36:	85 bd       	out	0x25, r24	; 37
 b38:	83 e0       	ldi	r24, 0x03	; 3
 b3a:	87 bd       	out	0x27, r24	; 39
 b3c:	ee e6       	ldi	r30, 0x6E	; 110
 b3e:	f0 e0       	ldi	r31, 0x00	; 0
 b40:	80 81       	ld	r24, Z
 b42:	82 60       	ori	r24, 0x02	; 2
 b44:	80 83       	st	Z, r24
 b46:	47 98       	cbi	0x08, 7	; 8
 b48:	2b 98       	cbi	0x05, 3	; 5
 b4a:	3f 9a       	sbi	0x07, 7	; 7
 b4c:	23 9a       	sbi	0x04, 3	; 4
 b4e:	e8 e6       	ldi	r30, 0x68	; 104
 b50:	f0 e0       	ldi	r31, 0x00	; 0
 b52:	80 81       	ld	r24, Z
 b54:	86 60       	ori	r24, 0x06	; 6
 b56:	80 83       	st	Z, r24
 b58:	ed e6       	ldi	r30, 0x6D	; 109
 b5a:	f0 e0       	ldi	r31, 0x00	; 0
 b5c:	80 81       	ld	r24, Z
 b5e:	80 68       	ori	r24, 0x80	; 128
 b60:	80 83       	st	Z, r24
 b62:	ec e6       	ldi	r30, 0x6C	; 108
 b64:	f0 e0       	ldi	r31, 0x00	; 0
 b66:	80 81       	ld	r24, Z
 b68:	88 60       	ori	r24, 0x08	; 8
 b6a:	80 83       	st	Z, r24
 b6c:	78 94       	sei
 b6e:	08 95       	ret

00000b70 <setup_stepper_glass>:
 b70:	99 27       	eor	r25, r25
 b72:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <ticks_for_step_glass+0x1>
 b76:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <ticks_for_step_glass>
 b7a:	87 b1       	in	r24, 0x07	; 7
 b7c:	80 67       	ori	r24, 0x70	; 112
 b7e:	87 b9       	out	0x07, r24	; 7
 b80:	08 95       	ret

00000b82 <setup_stepper_disp>:
 b82:	99 27       	eor	r25, r25
 b84:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ticks_for_step_disp+0x1>
 b88:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ticks_for_step_disp>
 b8c:	84 b1       	in	r24, 0x04	; 4
 b8e:	80 6e       	ori	r24, 0xE0	; 224
 b90:	84 b9       	out	0x04, r24	; 4
 b92:	08 95       	ret

00000b94 <set_position_glass>:
 b94:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <current_position_glass+0x1>
 b98:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <current_position_glass>
 b9c:	08 95       	ret

00000b9e <is_moving_glass>:
 b9e:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <current_position_glass>
 ba2:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <current_position_glass+0x1>
 ba6:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <target_position_glass>
 baa:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <target_position_glass+0x1>
 bae:	81 e0       	ldi	r24, 0x01	; 1
 bb0:	42 17       	cp	r20, r18
 bb2:	53 07       	cpc	r21, r19
 bb4:	09 f4       	brne	.+2      	; 0xbb8 <is_moving_glass+0x1a>
 bb6:	80 e0       	ldi	r24, 0x00	; 0
 bb8:	08 95       	ret

00000bba <stepper_move_glass>:
 bba:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <target_position_glass+0x1>
 bbe:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <target_position_glass>
 bc2:	08 95       	ret

00000bc4 <set_position_disp>:
}

void set_position_disp(int step) {
	current_position_disp  = step;
 bc4:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <current_position_disp+0x1>
 bc8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <current_position_disp>
 bcc:	08 95       	ret

00000bce <is_moving_disp>:
}

uint8_t is_moving_disp() {
	return current_position_disp != target_position_disp;
 bce:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <current_position_disp>
 bd2:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <current_position_disp+0x1>
 bd6:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <target_position_disp>
 bda:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <target_position_disp+0x1>
 bde:	81 e0       	ldi	r24, 0x01	; 1
 be0:	42 17       	cp	r20, r18
 be2:	53 07       	cpc	r21, r19
 be4:	09 f4       	brne	.+2      	; 0xbe8 <is_moving_disp+0x1a>
 be6:	80 e0       	ldi	r24, 0x00	; 0
}
 be8:	08 95       	ret

00000bea <get_position_disp>:

int get_position_disp() {
	return current_position_disp;
 bea:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current_position_disp>
 bee:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current_position_disp+0x1>
}
 bf2:	08 95       	ret

00000bf4 <stepper_move_disp>:

void stepper_move_disp(int step) {
	target_position_disp = step;
 bf4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <target_position_disp+0x1>
 bf8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <target_position_disp>
 bfc:	08 95       	ret

00000bfe <_exit>:
 bfe:	f8 94       	cli

00000c00 <__stop_program>:
 c00:	ff cf       	rjmp	.-2      	; 0xc00 <__stop_program>
