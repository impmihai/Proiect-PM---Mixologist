
Proiect PM - Mixologist.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000208  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008fc  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bc  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032d  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001698  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045f  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cd  00000000  00000000  00001b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_9>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_11>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a5 30       	cpi	r26, 0x05	; 5
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  9c:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_11>:
void setup_timer2() {
	TCCR2B |= (1<<CS20) ;   //clock select is divided by 64.
	TCCR2A |= (1<<WGM21);              //sets mode to CTC
	OCR2A = 0x7C;                      //sets TOP to 124 so the timer will overflow every 0.5 ms.
	TIMSK2 |= (1<<OCIE2A);              //Output Compare Match A Interrupt Enable
	sei();
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	1b b8       	out	0x0b, r1	; 11
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_9>:
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <count>
  d8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
  dc:	81 11       	cpse	r24, r1
  de:	03 c0       	rjmp	.+6      	; 0xe6 <__vector_9+0x26>
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count>
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ee:	98 13       	cpse	r25, r24
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <__vector_9+0x34>
  f2:	2f 9a       	sbi	0x05, 7	; 5
  f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count>
  f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pinG_pwm>
  fc:	98 13       	cpse	r25, r24
  fe:	01 c0       	rjmp	.+2      	; 0x102 <__vector_9+0x42>
 100:	2e 9a       	sbi	0x05, 6	; 5
 102:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count>
 106:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pinB_pwm>
 10a:	98 13       	cpse	r25, r24
 10c:	01 c0       	rjmp	.+2      	; 0x110 <__vector_9+0x50>
 10e:	2d 9a       	sbi	0x05, 5	; 5
 110:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count>
 114:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pinB_pwm>
 118:	98 13       	cpse	r25, r24
 11a:	01 c0       	rjmp	.+2      	; 0x11e <__vector_9+0x5e>
 11c:	2c 9a       	sbi	0x05, 4	; 5
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <main>:

int state = 0;

int main(void)
{
	count = 0;
 12c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count>
	//setup_timer2();
	DDRB = 0xFF;
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
 134:	8a b9       	out	0x0a, r24	; 10
	
	int i = 0;
	int j = 0;
	int k = 0;
	
	TCCR1A |= (1 << WGM11) | (1 << COM1A1);
 136:	e0 e8       	ldi	r30, 0x80	; 128
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	82 68       	ori	r24, 0x82	; 130
 13e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS11);
 140:	e1 e8       	ldi	r30, 0x81	; 129
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	8a 61       	ori	r24, 0x1A	; 26
 148:	80 83       	st	Z, r24
	ICR1 = 39999;
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	9c e9       	ldi	r25, 0x9C	; 156
 14e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 152:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			//pinR_pwm = 0;
			//_delay_ms(1);
			//
		//}
		
		OCR1A = 3999 + offset;
 156:	e8 e8       	ldi	r30, 0x88	; 136
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	2f eb       	ldi	r18, 0xBF	; 191
 15c:	32 e1       	ldi	r19, 0x12	; 18

		_delay_ms(5000);

		OCR1A = 1999 - offset;
 15e:	8f ea       	ldi	r24, 0xAF	; 175
 160:	94 e0       	ldi	r25, 0x04	; 4
			//pinR_pwm = 0;
			//_delay_ms(1);
			//
		//}
		
		OCR1A = 3999 + offset;
 162:	31 83       	std	Z+1, r19	; 0x01
 164:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	4f ef       	ldi	r20, 0xFF	; 255
 168:	53 e2       	ldi	r21, 0x23	; 35
 16a:	64 ef       	ldi	r22, 0xF4	; 244
 16c:	41 50       	subi	r20, 0x01	; 1
 16e:	50 40       	sbci	r21, 0x00	; 0
 170:	60 40       	sbci	r22, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x40>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x4a>
 176:	00 00       	nop

		_delay_ms(5000);

		OCR1A = 1999 - offset;
 178:	91 83       	std	Z+1, r25	; 0x01
 17a:	80 83       	st	Z, r24
 17c:	4f ef       	ldi	r20, 0xFF	; 255
 17e:	53 e2       	ldi	r21, 0x23	; 35
 180:	64 ef       	ldi	r22, 0xF4	; 244
 182:	41 50       	subi	r20, 0x01	; 1
 184:	50 40       	sbci	r21, 0x00	; 0
 186:	60 40       	sbci	r22, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x56>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x60>
 18c:	00 00       	nop
 18e:	e9 cf       	rjmp	.-46     	; 0x162 <main+0x36>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
