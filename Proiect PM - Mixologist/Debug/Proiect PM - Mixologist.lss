
Proiect PM - Mixologist.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000352  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000352  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800102  00800102  000003e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be2  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e4  00000000  00000000  000010ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058e  00000000  00000000  000019ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000578  00000000  00000000  000020ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000229  00000000  00000000  00002624  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000284d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_5>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_9>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e5       	ldi	r30, 0x52	; 82
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ab 30       	cpi	r26, 0x0B	; 11
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 93 00 	call	0x126	; 0x126 <main>
  b2:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_9>:

//ISR(TIMER2_OVF_vect) {
//PORTD &= 0x00;
//}
//
ISR(TIMER2_COMPA_vect) {
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
	count += 1;
  c8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <count>
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <count>
	if (count == 0) {
  d2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <count>
  d6:	81 11       	cpse	r24, r1
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <__vector_9+0x26>
		//PORTB &=
		PORTD &= ~0b11110000;
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	8b b9       	out	0x0b, r24	; 11
	}
	
	if (count == pinR_pwm) {
  e0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count>
  e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pinR_pwm>
  e8:	98 13       	cpse	r25, r24
  ea:	01 c0       	rjmp	.+2      	; 0xee <__vector_9+0x34>
		PORTD |= 0b10000000;
  ec:	5f 9a       	sbi	0x0b, 7	; 11
	}
	
	if (count == pinG_pwm) {
  ee:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count>
  f2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pinG_pwm>
  f6:	98 13       	cpse	r25, r24
  f8:	01 c0       	rjmp	.+2      	; 0xfc <__vector_9+0x42>
		PORTD |= 0b01000000;
  fa:	5e 9a       	sbi	0x0b, 6	; 11
	}
	
	if (count == pinB_pwm) {
  fc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count>
 100:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pinB_pwm>
 104:	98 13       	cpse	r25, r24
 106:	01 c0       	rjmp	.+2      	; 0x10a <__vector_9+0x50>
		PORTD |= 0b00100000;
 108:	5d 9a       	sbi	0x0b, 5	; 11
	}
	
	if (count == pinB_pwm) {
 10a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count>
 10e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pinB_pwm>
 112:	98 13       	cpse	r25, r24
 114:	01 c0       	rjmp	.+2      	; 0x118 <__vector_9+0x5e>
		PORTD |= 0b00010000;
 116:	5c 9a       	sbi	0x0b, 4	; 11
	}
}
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <main>:
	STATE_POURING,
};	

int main(void)
{
	DDRD = 0b10000000;
 126:	80 e8       	ldi	r24, 0x80	; 128
 128:	8a b9       	out	0x0a, r24	; 10
	int STATE = 0;
	int known_home_glass = 0;
	setup_stepper_glass(150);
 12a:	86 e9       	ldi	r24, 0x96	; 150
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 3f 01 	call	0x27e	; 0x27e <setup_stepper_glass>
	set_position_glass(15000);
 132:	88 e9       	ldi	r24, 0x98	; 152
 134:	9a e3       	ldi	r25, 0x3A	; 58
 136:	0e 94 62 01 	call	0x2c4	; 0x2c4 <set_position_glass>
	stepper_move_glass(15000);
 13a:	88 e9       	ldi	r24, 0x98	; 152
 13c:	9a e3       	ldi	r25, 0x3A	; 58
 13e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <stepper_move_glass>
	  // Start off with red.
	  rgbColour[0] = 255;
	  rgbColour[1] = 0;
	  rgbColour[2] = 0;
	
	sei();
 142:	78 94       	sei

int main(void)
{
	DDRD = 0b10000000;
	int STATE = 0;
	int known_home_glass = 0;
 144:	00 e0       	ldi	r16, 0x00	; 0
 146:	10 e0       	ldi	r17, 0x00	; 0
};	

int main(void)
{
	DDRD = 0b10000000;
	int STATE = 0;
 148:	c0 e0       	ldi	r28, 0x00	; 0
 14a:	d0 e0       	ldi	r29, 0x00	; 0
				if (get_position_glass() < 300)
					stepper_move_glass(300);
			}
		} else if (STATE == STATE_HOMING) {
			if (!is_moving_glass()) {
				known_home_glass = 1;
 14c:	cc 24       	eor	r12, r12
 14e:	c3 94       	inc	r12
 150:	d1 2c       	mov	r13, r1
				STATE = STATE_WAITING;
 152:	e1 2c       	mov	r14, r1
 154:	f1 2c       	mov	r15, r1
	
	sei();
	int pas = 0;
    while (1) 
    {
		PORTD &= ~0b10000000;
 156:	5f 98       	cbi	0x0b, 7	; 11
		if (STATE == STATE_WAITING) {
 158:	20 97       	sbiw	r28, 0x00	; 0
 15a:	a9 f4       	brne	.+42     	; 0x186 <main+0x60>
			PORTD |= 0b10000000;
 15c:	5f 9a       	sbi	0x0b, 7	; 11
		
			if (!known_home_glass) {
 15e:	01 15       	cp	r16, r1
 160:	11 05       	cpc	r17, r1
 162:	39 f4       	brne	.+14     	; 0x172 <main+0x4c>
				STATE = STATE_HOMING;
				stepper_move_glass(0);
 164:	8e 2d       	mov	r24, r14
 166:	9f 2d       	mov	r25, r15
 168:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <stepper_move_glass>
		PORTD &= ~0b10000000;
		if (STATE == STATE_WAITING) {
			PORTD |= 0b10000000;
		
			if (!known_home_glass) {
				STATE = STATE_HOMING;
 16c:	cc 2d       	mov	r28, r12
 16e:	dd 2d       	mov	r29, r13
 170:	f2 cf       	rjmp	.-28     	; 0x156 <main+0x30>
				stepper_move_glass(0);
			} else {
				if (get_position_glass() < 300)
 172:	0e 94 75 01 	call	0x2ea	; 0x2ea <get_position_glass>
 176:	8c 32       	cpi	r24, 0x2C	; 44
 178:	91 40       	sbci	r25, 0x01	; 1
 17a:	6c f7       	brge	.-38     	; 0x156 <main+0x30>
					stepper_move_glass(300);
 17c:	8c e2       	ldi	r24, 0x2C	; 44
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <stepper_move_glass>
 184:	e8 cf       	rjmp	.-48     	; 0x156 <main+0x30>
			}
		} else if (STATE == STATE_HOMING) {
 186:	c1 30       	cpi	r28, 0x01	; 1
 188:	d1 05       	cpc	r29, r1
 18a:	29 f7       	brne	.-54     	; 0x156 <main+0x30>
			if (!is_moving_glass()) {
 18c:	0e 94 67 01 	call	0x2ce	; 0x2ce <is_moving_glass>
 190:	81 11       	cpse	r24, r1
 192:	e1 cf       	rjmp	.-62     	; 0x156 <main+0x30>
				known_home_glass = 1;
 194:	0c 2d       	mov	r16, r12
 196:	1d 2d       	mov	r17, r13
				STATE = STATE_WAITING;
 198:	ce 2d       	mov	r28, r14
 19a:	df 2d       	mov	r29, r15
 19c:	dc cf       	rjmp	.-72     	; 0x156 <main+0x30>

0000019e <__vector_16>:
volatile int current_position_glass = 0;
volatile int target_position_glass = 0;

// The code for the motor that moves the glass around.

ISR(TIMER0_COMPA_vect) {
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
	if (current_position_glass < target_position_glass) {
 1b0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <current_position_glass>
 1b4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <current_position_glass+0x1>
 1b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1c0:	28 17       	cp	r18, r24
 1c2:	39 07       	cpc	r19, r25
 1c4:	7c f4       	brge	.+30     	; 0x1e4 <__vector_16+0x46>
		STEPPER_GLASS_PORT ^= (1 << STEPPER_GLASS_STEP_PIN);
 1c6:	9b b1       	in	r25, 0x0b	; 11
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	89 27       	eor	r24, r25
 1cc:	8b b9       	out	0x0b, r24	; 11
		STEPPER_GLASS_PORT |= (1 << STEPPER_GLASS_DIRECTION_PIN);
 1ce:	5b 9a       	sbi	0x0b, 3	; 11
		current_position_glass += 1;
 1d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <current_position_glass>
 1d4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <current_position_glass+0x1>
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <current_position_glass+0x1>
 1de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_position_glass>
 1e2:	19 c0       	rjmp	.+50     	; 0x216 <__vector_16+0x78>
	} else if (current_position_glass > target_position_glass) {
 1e4:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <current_position_glass>
 1e8:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <current_position_glass+0x1>
 1ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1f4:	82 17       	cp	r24, r18
 1f6:	93 07       	cpc	r25, r19
 1f8:	74 f4       	brge	.+28     	; 0x216 <__vector_16+0x78>
		STEPPER_GLASS_PORT ^= (1 << STEPPER_GLASS_STEP_PIN);
 1fa:	9b b1       	in	r25, 0x0b	; 11
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	89 27       	eor	r24, r25
 200:	8b b9       	out	0x0b, r24	; 11
		STEPPER_GLASS_PORT &= ~(1 << STEPPER_GLASS_DIRECTION_PIN);
 202:	5b 98       	cbi	0x0b, 3	; 11
			current_position_glass -= 1;
 204:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <current_position_glass>
 208:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <current_position_glass+0x1>
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <current_position_glass+0x1>
 212:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_position_glass>
	}
}
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	3f 91       	pop	r19
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_5>:

//
ISR (PCINT1_vect)
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	8f 93       	push	r24
	if ((PINB & (1 << PB3)) == 0) { // HOMNG PAHAR
 234:	1b 99       	sbic	0x03, 3	; 3
 236:	08 c0       	rjmp	.+16     	; 0x248 <__vector_5+0x20>
		current_position_glass = 0;
 238:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <current_position_glass+0x1>
 23c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <current_position_glass>
		PORTD ^= 1 << PD7;	
 240:	8b b1       	in	r24, 0x0b	; 11
 242:	80 58       	subi	r24, 0x80	; 128
 244:	8b b9       	out	0x0b, r24	; 11
 246:	05 c0       	rjmp	.+10     	; 0x252 <__vector_5+0x2a>
	} else if ((PINB & (1 << PB4)) == 0) {
 248:	1c 99       	sbic	0x03, 4	; 3
 24a:	03 c0       	rjmp	.+6      	; 0x252 <__vector_5+0x2a>
		PORTD ^= 1 << PD7;
 24c:	8b b1       	in	r24, 0x0b	; 11
 24e:	80 58       	subi	r24, 0x80	; 128
 250:	8b b9       	out	0x0b, r24	; 11
	}
}
 252:	8f 91       	pop	r24
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <set_speed_glass>:
	
	sei();
}

void set_speed_glass(uint8_t stepsPerSecond) {
	steps_per_second_glass = stepsPerSecond;
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 264:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	OCR0A = COUNT_TO;
 268:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 26c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 270:	89 e0       	ldi	r24, 0x09	; 9
 272:	9d e3       	ldi	r25, 0x3D	; 61
 274:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__divmodhi4>
 278:	61 50       	subi	r22, 0x01	; 1
 27a:	67 bd       	out	0x27, r22	; 39
 27c:	08 95       	ret

0000027e <setup_stepper_glass>:
		PORTD ^= 1 << PD7;
	}
}

void setup_stepper_glass(int stepsPerSecond) {
	TCCR0A |= (1 << WGM01); // Set mode to CTC;
 27e:	94 b5       	in	r25, 0x24	; 36
 280:	92 60       	ori	r25, 0x02	; 2
 282:	94 bd       	out	0x24, r25	; 36
	TCCR0B |= (1 << CS00) | (1 << CS02); // prescaler 1024
 284:	95 b5       	in	r25, 0x25	; 37
 286:	95 60       	ori	r25, 0x05	; 5
 288:	95 bd       	out	0x25, r25	; 37
	TIMSK0 |= (1 << OCIE0A); // activate interrupt
 28a:	ee e6       	ldi	r30, 0x6E	; 110
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	90 81       	ld	r25, Z
 290:	92 60       	ori	r25, 0x02	; 2
 292:	90 83       	st	Z, r25
	set_speed_glass(stepsPerSecond);
 294:	0e 94 2f 01 	call	0x25e	; 0x25e <set_speed_glass>
	STEPPER_GLASS_DDR |= (1 << STEPPER_GLASS_STEP_PIN) | (1 << STEPPER_GLASS_ENABLED_PIN) | (1 << STEPPER_GLASS_DIRECTION_PIN);
 298:	8a b1       	in	r24, 0x0a	; 10
 29a:	8c 61       	ori	r24, 0x1C	; 28
 29c:	8a b9       	out	0x0a, r24	; 10
	
	// ACTIVARE ENDPOINT. MODIFICA AICI DACA SCHIMBI PINUL.
	
	PORTB &= ~(1 << PB4);
 29e:	2c 98       	cbi	0x05, 4	; 5
	PORTB &= ~(1 << PB3);
 2a0:	2b 98       	cbi	0x05, 3	; 5
	
	DDRB |= 1 << PB4;
 2a2:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= 1 << PB3;
 2a4:	23 9a       	sbi	0x04, 3	; 4
	
	PCICR |= (1 << PCIE1);
 2a6:	e8 e6       	ldi	r30, 0x68	; 104
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	82 60       	ori	r24, 0x02	; 2
 2ae:	80 83       	st	Z, r24
	
	PCMSK1 |= (1 << PCINT12);
 2b0:	ec e6       	ldi	r30, 0x6C	; 108
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	80 61       	ori	r24, 0x10	; 16
 2b8:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);
 2ba:	80 81       	ld	r24, Z
 2bc:	88 60       	ori	r24, 0x08	; 8
 2be:	80 83       	st	Z, r24
	
	sei();
 2c0:	78 94       	sei
 2c2:	08 95       	ret

000002c4 <set_position_glass>:

//volatile int remaining_move = 0;
volatile int position;

void set_position_glass(int step) {
	current_position_glass  = step;
 2c4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <current_position_glass+0x1>
 2c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <current_position_glass>
 2cc:	08 95       	ret

000002ce <is_moving_glass>:
}
 
uint8_t is_moving_glass() {
	return current_position_glass != target_position_glass;	
 2ce:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <current_position_glass>
 2d2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <current_position_glass+0x1>
 2d6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 2da:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	42 17       	cp	r20, r18
 2e2:	53 07       	cpc	r21, r19
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <is_moving_glass+0x1a>
 2e6:	80 e0       	ldi	r24, 0x00	; 0
}
 2e8:	08 95       	ret

000002ea <get_position_glass>:

int get_position_glass() {
	return current_position_glass;
 2ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <current_position_glass>
 2ee:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <current_position_glass+0x1>
}
 2f2:	08 95       	ret

000002f4 <stepper_move_glass>:

void stepper_move_glass(int step) {
	target_position_glass = step;
 2f4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 2fc:	08 95       	ret

000002fe <__divmodhi4>:
 2fe:	97 fb       	bst	r25, 7
 300:	07 2e       	mov	r0, r23
 302:	16 f4       	brtc	.+4      	; 0x308 <__divmodhi4+0xa>
 304:	00 94       	com	r0
 306:	07 d0       	rcall	.+14     	; 0x316 <__divmodhi4_neg1>
 308:	77 fd       	sbrc	r23, 7
 30a:	09 d0       	rcall	.+18     	; 0x31e <__divmodhi4_neg2>
 30c:	0e 94 93 01 	call	0x326	; 0x326 <__udivmodhi4>
 310:	07 fc       	sbrc	r0, 7
 312:	05 d0       	rcall	.+10     	; 0x31e <__divmodhi4_neg2>
 314:	3e f4       	brtc	.+14     	; 0x324 <__divmodhi4_exit>

00000316 <__divmodhi4_neg1>:
 316:	90 95       	com	r25
 318:	81 95       	neg	r24
 31a:	9f 4f       	sbci	r25, 0xFF	; 255
 31c:	08 95       	ret

0000031e <__divmodhi4_neg2>:
 31e:	70 95       	com	r23
 320:	61 95       	neg	r22
 322:	7f 4f       	sbci	r23, 0xFF	; 255

00000324 <__divmodhi4_exit>:
 324:	08 95       	ret

00000326 <__udivmodhi4>:
 326:	aa 1b       	sub	r26, r26
 328:	bb 1b       	sub	r27, r27
 32a:	51 e1       	ldi	r21, 0x11	; 17
 32c:	07 c0       	rjmp	.+14     	; 0x33c <__udivmodhi4_ep>

0000032e <__udivmodhi4_loop>:
 32e:	aa 1f       	adc	r26, r26
 330:	bb 1f       	adc	r27, r27
 332:	a6 17       	cp	r26, r22
 334:	b7 07       	cpc	r27, r23
 336:	10 f0       	brcs	.+4      	; 0x33c <__udivmodhi4_ep>
 338:	a6 1b       	sub	r26, r22
 33a:	b7 0b       	sbc	r27, r23

0000033c <__udivmodhi4_ep>:
 33c:	88 1f       	adc	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	5a 95       	dec	r21
 342:	a9 f7       	brne	.-22     	; 0x32e <__udivmodhi4_loop>
 344:	80 95       	com	r24
 346:	90 95       	com	r25
 348:	bc 01       	movw	r22, r24
 34a:	cd 01       	movw	r24, r26
 34c:	08 95       	ret

0000034e <_exit>:
 34e:	f8 94       	cli

00000350 <__stop_program>:
 350:	ff cf       	rjmp	.-2      	; 0x350 <__stop_program>
