
Proiect PM - Mixologist.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000086d  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076b  00000000  00000000  00000ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f6  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  0000154c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000438  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011b  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001b27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_16>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_17>
  48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a3 30       	cpi	r26, 0x03	; 3
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  9c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_17>:
	//
	//// initialize overflow counter variable
	//tot_overflow = 0;
//}

ISR(TIMER0_COMPB_vect) {
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
	// clear the output pin on OCR0 match
	PORTD &= 0b00000000;
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	1b b8       	out	0x0b, r1	; 11
}
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_16>:

volatile uint8_t counter;
volatile uint8_t pin_pwm;
ISR(TIMER0_COMPA_vect) {
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	// clear the output pin on OCR0 match
	if (counter == pin_pwm) {
  ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <counter>
  d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pin_pwm>
  d6:	98 13       	cpse	r25, r24
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <__vector_16+0x20>
		PORTB ^= 0b11111111;
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	80 95       	com	r24
  de:	85 b9       	out	0x05, r24	; 5
	}
	counter++;
  e0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter>
}
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_18>:

ISR(TIMER0_OVF_vect) {
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
	// set the output pin at timer overflow
	PORTD |= 0b11111111;
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	8b b9       	out	0x0b, r24	; 11
	PORTB &= 0b00000000;
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	15 b8       	out	0x05, r1	; 5
}
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:

int main(void)
{

	DDRD = 0b10000000;
 11a:	80 e8       	ldi	r24, 0x80	; 128
 11c:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b11111111;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	84 b9       	out	0x04, r24	; 4
	TCCR0A |= 1 << WGM00 | 1 << WGM01;
 122:	84 b5       	in	r24, 0x24	; 36
 124:	83 60       	ori	r24, 0x03	; 3
 126:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 1 << CS00;
 128:	85 b5       	in	r24, 0x25	; 37
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	85 bd       	out	0x25, r24	; 37
	OCR0B = 0;
 12e:	18 bc       	out	0x28, r1	; 40
	counter = 0;
 130:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter>
	TIMSK0 |= ((1 << OCIE0B) | (1 << OCIE0A) | (1 << TOIE0)); // use both interrupts
 134:	ee e6       	ldi	r30, 0x6E	; 110
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	87 60       	ori	r24, 0x07	; 7
 13c:	80 83       	st	Z, r24
	sei();
 13e:	78 94       	sei
	PORTD |= 0b11111111;
	PORTB &= 0b00000000;
}

int main(void)
{
 140:	80 e0       	ldi	r24, 0x00	; 0
	//timer1_init();
    while (1) 
    {
		int i = 0;
		for (i = 0; i < 255; i++) {
			OCR0B = i;
 142:	88 bd       	out	0x28, r24	; 40
			pin_pwm = i;
 144:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pin_pwm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	ef e3       	ldi	r30, 0x3F	; 63
 14a:	ff e1       	ldi	r31, 0x1F	; 31
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x32>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x38>
 152:	00 00       	nop
 154:	8f 5f       	subi	r24, 0xFF	; 255
    /* Replace with your application code */
	//timer1_init();
    while (1) 
    {
		int i = 0;
		for (i = 0; i < 255; i++) {
 156:	8f 3f       	cpi	r24, 0xFF	; 255
 158:	a1 f7       	brne	.-24     	; 0x142 <main+0x28>
 15a:	f2 cf       	rjmp	.-28     	; 0x140 <main+0x26>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
